<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Account - <%= user.username %></title>

    <!-- Stylesheets -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

    <link rel="stylesheet" href="css/main.css">

    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }
    
        .banner {
    background-image: linear-gradient(rgba(11, 0, 109, 0.3), rgba(255, 251, 3, 0.3)), 
                      url('https://personal.asuswebstorage.com/wp-content/uploads/2021/12/hc_bnr_bg.jpg');
    background-size: cover;
    background-position: center;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    margin-bottom: 2rem;
}

.banner h1 {
    font-size: 3rem;
    text-align: center;
    -webkit-text-stroke: 2px transparent; /* Default transparent for the outline */
    background: linear-gradient(to right, #ff0000, #718b09);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    text-shadow: 
        2px 2px 5px rgba(172, 143, 246, 0.5), 
        -2px -2px 5px rgba(43, 141, 118, 0.944);
}

    
        .breadcrumb {
            padding: 1rem 2rem;
            background: white;
            border-bottom: 1px solid #eee;
        }
    
        .breadcrumb a {
            color: #0066cc;
            text-decoration: none;
        }
    
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }
    
        /* Profile Grid Layout */
        .profile-grid {
            display: grid;
            grid-template-columns: 250px 1fr;
            gap: 2rem;
            margin: 2rem 0;
        }
    
        /* Sidebar Styles */
        .sidebar {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
    
        .sidebar-menu {
            list-style: none;
            padding: 0;
        }
    
        .sidebar-menu li {
            margin-bottom: 0.5rem;
        }
    
        .sidebar-menu a {
            display: block;
            padding: 0.75rem 1rem;
            color: #333;
            text-decoration: none;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
    
        .sidebar-menu a:hover, .sidebar-menu a.active {
            background-color: #0066cc;
            color: white;
        }
    
        /* Main Content Area */
        .main-content {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            min-height: 400px;
        }
    
        /* Address and Order Item Styles */
        .address-item, .order-item {
            border: 1px solid #eee;
            padding: 15px;
            margin-bottom: 10px;
            border-radius: 4px;
        }
    
        .add-address-btn {
            display: inline-block;
            padding: 10px 20px;
            color: white;
            background-color: #0066cc;
            border-radius: 5px;
            text-decoration: none;
            margin-top: 15px;
        }
    
        /* Address Form Container */
        .address-form {
            max-width: 600px;
            margin: 2rem auto;
            padding: 2rem;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    
        .section-title {
            text-align: center;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
            color: #333;
            font-weight: 600;
        }
    
        /* Form Group Styling */
        .form-group {
            margin-bottom: 1.5rem;
        }
    
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #555;
            font-size: 1rem;
        }
    
        .form-input {
            width: 100%;
            padding: 12px 15px;
            font-size: 1rem;
            border: 1px solid #ccc;
            border-radius: 5px;
            transition: border-color 0.2s;
        }
    
        .form-input:focus {
            border-color: #0066cc;
            outline: none;
        }
    
        /* Resizable Textarea */
        .resizable-textarea {
            resize: vertical;
            min-height: 80px;
            max-height: 150px;
        }
    
        /* Submit Button */
        .submit-btn {
            display: block;
            width: 100%;
            padding: 12px 0;
            background-color: #0066cc;
            color: #fff;
            font-size: 1.1rem;
            font-weight: 600;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
    
        .submit-btn:hover {
            background-color: #004a99;
        }

        /* Overall container for the addresses */
.addresses-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    padding: 20px;
}

/* Individual address card container */
.address-card {
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Hover effect for each address card */
.address-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
}

/* Header style */
.address-header h4 {
    margin-bottom: 10px;
    font-size: 1.2em;
    color: #333;
}

/* Details section */
.address-details p {
    font-size: 1em;
    margin: 5px 0;
    color: #555;
}

/* Action buttons */
.address-actions {
    margin-top: 15px;
    display: flex;
    justify-content: space-between;
}

.edit-btn, .delete-btn {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 8px 15px;
    cursor: pointer;
    font-size: 0.9em;
    transition: background-color 0.3s ease;
}

.edit-btn:hover, .delete-btn:hover {
    background-color: #0056b3;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .addresses-container {
        grid-template-columns: 1fr;
    }
}



/* Modal Styles */
.modal {
    transition: all 0.3s ease-in-out;
}

.modal-content {
    transform: scale(0.7);
    opacity: 0;
    transition: all 0.3s ease-in-out;
}

.modal.show .modal-content {
    transform: scale(1);
    opacity: 1;
}

.close-modal:hover {
    color: #f00;
}

/* Form Styles */
.modal .form-group {
    margin-bottom: 1rem;
}

.modal .form-input {
    transition: border-color 0.3s ease;
}

.modal .form-input:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}
    </style>





<style>

    /* order Table Styles */
.custom-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin-bottom: 1rem;
    background-color: white;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
}

.custom-table thead {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
}

.custom-table th {
    padding: 12px 15px;
    text-align: left;
    font-weight: 600;
    color: #333;
    text-transform: uppercase;
    font-size: 0.9rem;
    border-bottom: 2px solid #dee2e6;
}

.custom-table td {
    padding: 12px 15px;
    vertical-align: middle;
    border-bottom: 1px solid #e9ecef;
    color: #555;
}

.custom-table tbody tr:hover {
    background-color: #f1f3f5;
    transition: background-color 0.3s ease;
}

/* Status Badge Styles */
.status-badge {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: capitalize;
}

.badge-warning {
    background-color: #ffc107;
    color: #212529;
}

.badge-info {
    background-color: #17a2b8;
    color: white;
}

.badge-primary {
    background-color: #007bff;
    color: white;
}

.badge-success {
    background-color: #28a745;
    color: white;
}

.badge-danger {
    background-color: #dc3545;
    color: white;
}

/* Action Button Styles */
.btn-action {
    display: inline-block;
    padding: 6px 12px;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

.btn-action:hover {
    background-color: #0056b3;
}

/* Pagination Styles */
.pagination-container {
    display: flex;
    justify-content: center;
    margin-top: 1.5rem;
}

.pagination {
    display: flex;
    list-style: none;
    padding: 0;
}

.pagination .page-item {
    margin: 0 2px;
}

.pagination .page-link {
    color: #007bff;
    background-color: white;
    border: 1px solid #dee2e6;
    padding: 8px 12px;
    text-decoration: none;
    transition: all 0.3s ease;
}

.pagination .page-item.active .page-link {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
}

.pagination .page-link:hover {
    background-color: #f8f9fa;
}
</style>





<style>

    /* Profile Styles */
.profile-section,
.edit-profile-section,
.change-password-section {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.profile-info {
    margin: 2rem 0;
}

.info-group {
    display: flex;
    margin-bottom: 1rem;
    padding: 0.5rem 0;
    border-bottom: 1px solid #eee;
}

.info-group label {
    width: 150px;
    font-weight: bold;
    color: #666;
}

.profile-actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
}

.profile-form,
.password-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.form-group label {
    font-weight: 500;
    color: #666;
}

.form-group input {
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
}

.btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s;
}

.btn-primary {
    background-color: #007bff;
    color: white;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
}

.btn:hover {
    opacity: 0.9;
}

</style>
    
</head>



<body>
    <div class="banner">
        <h1>My Account</h1>
    </div>

    <div class="breadcrumb">
        <a href="/">Home</a> > My Account
    </div>

    <div class="container">
        <div class="profile-grid">
            <!-- Sidebar -->
            <div class="sidebar">
                <ul class="sidebar-menu">
                    <li><a href="/userProfile" class="<%= activeSection === 'profile' ? 'active' : '' %>">Dashboard</a></li>
                    <li><a href="/profile/addresses" class="<%= activeSection === 'addresses' ? 'active' : '' %>">Addresses</a></li>
                    <li><a href="/profile/add-address" class="<%= activeSection === 'add-address' ? 'active' : '' %>">Add New Address</a></li>
                    <li><a href="/profile/orders" class="<%= activeSection === 'order-details' ? 'active' : '' %>">Order Details</a></li>
                    <li><a href="/logout">Sign Out</a></li>
                </ul>
            </div>

            <!-- Main Content Area -->
            <div class="main-content">
                <!-- Dynamic Content based on active section -->

                <!-- Profile Section -->
<% if (activeSection === 'profile') { %>
    <div class="profile-section">
        <h2>Profile Dashboard</h2>
        <div class="profile-info">
            <div class="info-group">
                <label>Name:</label>
                <span><%= user.name %></span>
            </div>
            <div class="info-group">
                <label>Email:</label>
                <span><%= user.email %></span>
            </div>
            <div class="info-group">
                <label>Phone:</label>
                <span><%= user.phone || 'Not provided' %></span>
            </div>
            <div class="info-group">
                <label>Member Since:</label>
                <span><%= new Date(user.createdOn).toLocaleDateString() %></span>
            </div>
        </div>
        <div class="profile-actions">
            <button onclick="window.location.href='/edit-profile'" class="btn btn-primary">
                Edit Profile
            </button>
            <button onclick="window.location.href='/change-password'" class="btn btn-secondary">
                Change Password
            </button>
        </div>
    </div>
    <% } %>
    

    <!-- Edit Profile Section -->
    <% if (activeSection === 'edit-profile') { %>
        <div class="edit-profile-section">
            <h2>Edit Profile</h2>
            <form id="editProfileForm" class="profile-form">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" name="name" value="<%= user.name %>" required>
                </div>
                <div class="form-group">
                    <label for="phone">Phone</label>
                    <input type="tel" id="phone" name="phone" value="<%= user.phone || '' %>">
                </div>
                <button type="submit" class="btn btn-primary">Save Changes</button>
            </form>
        </div>
        <% } %>

    
    <!-- Change Password Section -->
    <% if (activeSection === 'forgot-password') { %>
        <div class="change-password-section">
            <h2>Change Password</h2>
            <form id="changePasswordForm" class="password-form">
                <div class="form-group position-relative">
                    <label for="currentPassword">Current Password</label>
                    <div class="input-group">
                        <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
                        <span class="input-group-text toggle-password" data-target="currentPassword">
                            <i class="fas fa-eye-slash"></i>
                        </span>
                    </div>
                </div>
                <div class="form-group position-relative">
                    <label for="newPassword">New Password</label>
                    <div class="input-group">
                        <input type="password" id="newPassword" name="newPassword" class="form-control" required>
                        <span class="input-group-text toggle-password" data-target="newPassword">
                            <i class="fas fa-eye-slash"></i>
                        </span>
                    </div>
                </div>
                <div class="form-group position-relative">
                    <label for="confirmPassword">Confirm New Password</label>
                    <div class="input-group">
                        <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
                        <span class="input-group-text toggle-password" data-target="confirmPassword">
                            <i class="fas fa-eye-slash"></i>
                        </span>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Change Password</button>
            </form>
        </div>
    <% } %>



               <!-- Orders Section -->
               <% if (activeSection === 'orders') { %>
                <div class="orders-section">
                    
                    
                    <% if (orders && orders.length > 0) { %>
                        <div class="table-responsive">
                            <table class="custom-table">
                                <thead>
                                    <tr>
                                        <th>Order Number</th>
                                        <th>Date</th>
                                        <th>Total Amount</th>
                                        <th>Payment Method</th>
                                        <th>Order Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% orders.forEach(order => { %>
                                        <tr>
                                            <td>#<%= order._id %></td>
                                            <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
                                            <td>₹<%= order.total.toFixed(2) %></td>
                                            <td><%= order.paymentMethod.toUpperCase() %></td>
                                            <td>
                                                <span class="status-badge 
                                                    <%= order.status === 'pending' ? 'badge-warning' : 
                                                        order.status === 'processing' ? 'badge-info' :
                                                        order.status === 'shipped' ? 'badge-primary' :
                                                        order.status === 'delivered' ? 'badge-success' : 'badge-danger' %>">
                                                    <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                                </span>
                                            </td>
                                            <td>
                                                <a href="/order/<%= order._id %>" class="btn-action view-details">
                                                    View Details
                                                </a>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>

                        <div class="pagination-container">
                            <nav aria-label="Order navigation">
                                <ul class="pagination">
                                    <% if (currentPage > 1) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="/profile/orders?page=<%= currentPage - 1 %>" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                            </a>
                                        </li>
                                    <% } %>
                    
                                    <% 
                                    // Calculate start and end page numbers
                                    let startPage = Math.max(1, currentPage - 2);
                                    let endPage = Math.min(totalPages, currentPage + 2);
                                    
                                    // Adjust start and end pages to always show 5 page numbers if possible
                                    if (endPage - startPage + 1 < 5) {
                                        if (currentPage <= 3) {
                                            endPage = Math.min(5, totalPages);
                                        } else {
                                            startPage = Math.max(1, totalPages - 4);
                                        }
                                    }
                                    %>
                    
                                    <% for (let i = startPage; i <= endPage; i++) { %>
                                        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                            <a class="page-link" href="/profile/orders?page=<%= i %>"><%= i %></a>
                                        </li>
                                    <% } %>
                    
                                    <% if (currentPage < totalPages) { %>
                                        <li class="page-item">
                                            <a class="page-link" href="/profile/orders?page=<%= currentPage + 1 %>" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                            </a>
                                        </li>
                                    <% } %>
                                </ul>
                            </nav>
                        </div>
            
                        
                        
                    <% } else { %>
                        <div class="no-orders-container">
                            <h4>No orders found</h4>
                            <p>You haven't placed any orders yet.</p>
                            <a href="/shop" class="btn-primary">Start Shopping</a>
                        </div>
                    <% } %>
                </div>
            <% } %>





                <!-- Addresses Section -->
                <% if (activeSection === 'addresses') { %>
                    <h2>Your Addresses</h2>
                    <% if (address && Array.isArray(address.address) && address.address.length > 0) { %>
                        <div class="addresses-container">
                            <% address.address.forEach(function(addr) { %>
                                <div class="address-card" data-id="<%= addr._id %>">
                                    <div class="address-header">
                                        <h4><%= addr.addressType %> Address</h4>
                                    </div>
                                    <div class="address-details">
                                        <p><strong>Name:</strong> <%= addr.name %></p>
                                        <p><strong>City:</strong> <%= addr.city %></p>
                                        <p><strong>State:</strong> <%= addr.state %></p>
                                        <p><strong>Pincode:</strong> <%= addr.pincode %></p>
                                        <p><strong>Phone:</strong> <%= addr.phone %></p>
                                        <p><strong>Alt Phone:</strong> <%= addr.altPhone %></p>
                                    </div>
                                    <div class="address-actions">
                                        <button onclick="handleEditAddress('<%= addr._id %>')" class="btn btn-primary btn-sm edit-btn">
                                            Edit
                                        </button>
                                        <button class="delete-address-btn delete-btn" data-id="<%= addr._id %>">Delete</button>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    <% } else { %>
                        <p>No addresses found.</p>
                    <% } %>
                    <a href="/profile/add-address" class="add-address-btn">Add New Address</a>

                <% } %>
                

                <!-- Add Address Section -->
                <% if (activeSection === 'add-address') { %>
                    <h2 class="section-title">Add New Address</h2>
                    <form action="/profile/add-address" method="POST" class="address-form">
                        <div class="form-group">
                            <label for="name">Full Name *</label>
                            <input type="text" name="name" id="name" class="form-input" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="phone">Phone Number *</label>
                            <input type="tel" name="phone" id="phone" class="form-input" pattern="[0-9]{10}" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="altPhone">Alternate Phone</label>
                            <input type="tel" name="altPhone" id="altPhone" class="form-input" pattern="[0-9]{10}">
                        </div>
                        
                        <div class="form-group">
                            <label for="addressType">Address Type *</label>
                            <select name="addressType" id="addressType" class="form-input" required>
                                <option value="">Select Type</option>
                                <option value="Home">Home</option>
                                <option value="Work">Work</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="landmark">Landmark *</label>
                            <input type="text" name="landmark" id="landmark" class="form-input" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="city">City *</label>
                            <input type="text" name="city" id="city" class="form-input" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="state">State *</label>
                            <input type="text" name="state" id="state" class="form-input" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="pincode">Pincode *</label>
                            <input type="text" name="pincode" id="pincode" class="form-input" pattern="[0-9]{6}" required>
                        </div>
                        
                        <button type="submit" class="submit-btn">Add Address</button>
                    </form>
                <% } %>


                <!-- Account Details Section -->
                <% if (activeSection === 'account-details') { %>
                    <h2>Account Details</h2>
                    <p>Change your personal information here.</p>
                    <!-- Include form for updating user details -->
                <% } %>

                
            </div>
        </div>
        <!-- Edit Address Modal -->

    </div>





<!-- Edit Address Modal -->
<div class="modal fade" id="editAddressModal" tabindex="-1" aria-labelledby="editAddressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAddressModalLabel">Edit Address</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="edit-form">
                    <div class="mb-3">
                        <label for="edit-name" class="form-label">Name*</label>
                        <input type="text" class="form-control" id="edit-name" required>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Address Type*</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="edit-addressType" value="Home" required>
                            <label class="form-check-label">Home</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="edit-addressType" value="Work" required>
                            <label class="form-check-label">Work</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="edit-addressType" value="Other" required>
                            <label class="form-check-label">Other</label>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="edit-phone" class="form-label">Phone*</label>
                        <input type="tel" class="form-control" id="edit-phone" required>
                    </div>

                    <div class="mb-3">
                        <label for="edit-alt-phone" class="form-label">Alternative Phone</label>
                        <input type="tel" class="form-control" id="edit-alt-phone">
                    </div>

                    <div class="mb-3">
                        <label for="edit-landmark" class="form-label">Landmark*</label>
                        <input type="text" class="form-control" id="edit-landmark" required>
                    </div>

                    <div class="mb-3">
                        <label for="edit-city" class="form-label">City*</label>
                        <input type="text" class="form-control" id="edit-city" required>
                    </div>

                    <div class="mb-3">
                        <label for="edit-state" class="form-label">State*</label>
                        <input type="text" class="form-control" id="edit-state" required>
                    </div>

                    <div class="mb-3">
                        <label for="edit-pincode" class="form-label">Pincode*</label>
                        <input type="text" class="form-control" id="edit-pincode" required>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


    <!-- Footer -->
    



</body>



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>

<script>
    
    
    // Wait for the DOM content to be loaded
    document.addEventListener('DOMContentLoaded', () => {
    const addAddressForm = document.querySelector('.address-form');
    
    if (addAddressForm) {
        addAddressForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Create FormData object
            const formData = new FormData(addAddressForm);
            const data = Object.fromEntries(formData);

            try {
                const response = await fetch('/profile/add-address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address added successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = '/profile/addresses';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: result.message || 'Failed to add address'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Something went wrong while adding the address'
                });
            }
        });
    }
});




   // Updated delete address functionality with SweetAlert2
document.addEventListener('DOMContentLoaded', function () {
    const deleteButtons = document.querySelectorAll('.delete-address-btn');

    deleteButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            const addressId = this.getAttribute('data-id');
            
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Send delete request
                    fetch(`/profile/delete-address/${addressId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Remove the address card from UI
                            this.closest('.address-card').remove();
                            
                            Swal.fire(
                                'Deleted!',
                                'Your address has been deleted.',
                                'success'
                            );
                        } else {
                            Swal.fire(
                                'Error!',
                                data.message || 'Failed to delete address',
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'Something went wrong while deleting the address.',
                            'error'
                        );
                    });
                }
            });
        });
    });
});

    



/// Function to handle edit button click
async function handleEditAddress(addressId) {
    try {
        if (!addressId) {
            throw new Error('Invalid address ID');
        }

        const addressCard = document.querySelector(`.address-card[data-id="${addressId}"]`);
        if (!addressCard) {
            throw new Error('Address card not found');
        }

        const response = await fetch(`/profile/get-address/${addressId}`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        });

        if (!response.ok) {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Error fetching address');
            } else {
                throw new Error('Server returned an invalid response');
            }
        }

        const data = await response.json();
        
        if (!data.success || !data.address) {
            throw new Error(data.message || 'Address data not found');
        }

        // Populate the edit form with address data
        const address = data.address;
        document.getElementById('edit-name').value = address.name || '';
        document.getElementById('edit-phone').value = address.phone || '';
        document.getElementById('edit-alt-phone').value = address.altPhone || '';
        document.getElementById('edit-landmark').value = address.landmark || '';
        document.getElementById('edit-city').value = address.city || '';
        document.getElementById('edit-state').value = address.state || '';
        document.getElementById('edit-pincode').value = address.pincode || '';
        
        // Set address type radio button - Note the capitalized value
        const addressTypeRadio = document.querySelector(`input[name="edit-addressType"][value="${address.addressType}"]`);
        if (addressTypeRadio) {
            addressTypeRadio.checked = true;
        }

        // Store addressId for update
        document.getElementById('edit-form').setAttribute('data-address-id', addressId);
        
        // Show modal using Bootstrap 5
        const editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
        editModal.show();

    } catch (error) {
        console.error('Error in handleEditAddress:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to fetch address details',
            confirmButtonColor: '#3085d6'
        });
    }
}

// edit Form submission handler
document.addEventListener('DOMContentLoaded', function() {
    const editForm = document.getElementById('edit-form');
    
    if (editForm) {
        editForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const addressId = this.getAttribute('data-address-id');
            if (!addressId) {
                Swal.fire('Error', 'Address ID not found', 'error');
                return;
            }

            // Gather form data - Note we're getting the value directly from the checked radio button
            const formData = {
                name: document.getElementById('edit-name').value,
                addressType: document.querySelector('input[name="edit-addressType"]:checked').value,
                phone: document.getElementById('edit-phone').value,
                altPhone: document.getElementById('edit-alt-phone').value,
                landmark: document.getElementById('edit-landmark').value,
                city: document.getElementById('edit-city').value,
                state: document.getElementById('edit-state').value,
                pincode: document.getElementById('edit-pincode').value
            };

            try {
                const response = await fetch(`/profile/edit-address/${addressId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
                    modal.hide();

                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        // Reload page to show updated address
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Failed to update address'
                    });
                }
            } catch (error) {
                console.error('Error updating address:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Something went wrong while updating the address'
                });
            }
        });
    }
});





// Edit Profile Form Handler with SweetAlert2
document.getElementById('editProfileForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch('/update-profile', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData)),
        });
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Profile updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = '/dashboard';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message || 'Failed to update profile'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong while updating profile'
        });
    }
});



// Change Password Form Handler with SweetAlert2
document.getElementById('changePasswordForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch('/change-password', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData)),
        });
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Password changed successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = '/dashboard';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message || 'Failed to change password'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong while changing password'
        });
    }
});

</script>



<script>
    // change password eye icone visble and disable
    document.addEventListener('DOMContentLoaded', () => {
        const togglePasswordButtons = document.querySelectorAll('.toggle-password');
        
        togglePasswordButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetId = button.getAttribute('data-target');
                const passwordInput = document.getElementById(targetId);
                const icon = button.querySelector('i');
                
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                } else {
                    passwordInput.type = 'password';
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                }
            });
        });
    });
</script>










</html>

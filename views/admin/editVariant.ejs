<%- include("../../views/partials/admin/header/") %>

<div class="container mt-4">
    <h4>Edit Variant for <%= product.productName %></h4>
    
    <% if (errorMessage) { %>
        <div class="alert alert-danger" role="alert">
            <%= errorMessage %>
        </div>
    <% } %>
    
    <!-- Edit Variant Form -->
    <div class="card p-4 mb-4">
        <form id="colorVariantForm" 
      action="/admin/colorVariant/edit/<%= variant._id %>" 
      method="POST" 
      enctype="multipart/form-data">
            <input type="hidden" name="productId" value="<%= product._id %>">
            
            <!-- Color Input -->
            <div class="mb-3">
                <label for="color" class="form-label">Color</label>
                <input type="text" 
                       name="color" 
                       id="color" 
                       class="form-control" 
                       value="<%= variant.color %>" 
                       >
                <div class="error-message" id="color-error" style="display:none; color:red;"></div>
            </div>

            <!-- Image Uploads -->
            <div class="mb-3">
                <label class="form-label">Product Images</label>
                <div class="row">
                    <% for(let i = 1; i <= 3; i++) { %>
                        <div class="col-md-4 mb-2">
                            <div class="image-upload-container">
                                <input class="form-control d-none image-input" 
                                       type="file" 
                                       id="productImage<%= i %>" 
                                       name="images" 
                                       data-index="<%= i-1 %>"
                                       accept="image/*">
                                <input type="hidden" name="existingImages[]" value="<%= variant.images && variant.images[i-1] ? variant.images[i-1].filename : '' %>">
                                <div id="imagePreview<%= i %>" class="image-preview" onclick="document.getElementById('productImage<%= i %>').click()">
                                    <% if (variant.images && variant.images[i-1] && variant.images[i-1].filename) { %>
                                        <img src="/uploads/product-images/<%= variant.images[i-1].filename %>" 
                                             alt="Product Image <%= i %>" 
                                             class="img-fluid w-100 h-100 object-fit-cover">
                                    <% } else { %>
                                        <div class="preview-text">Upload Image <%= i %></div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Sizes Container -->
           <!-- Sizes Container -->
<div id="sizesContainer">
    <% if (variant.sizes && variant.sizes.length > 0) { %>
        <% variant.sizes.forEach((sizeObj, index) => { %>
            <div class="row mb-3 size-row">
                <div class="col-md-5">
                    <label for="size<%= index %>" class="form-label">Size</label>
                    <select name="sizes[]" id="size<%= index %>" class="form-control size-select" >
                        <% [6, 7, 8, 9, 10].forEach(size => { %>
                            <option value="<%= size %>" 
                                    <%= sizeObj.size === size ? 'selected' : '' %>>
                                UK <%= size %>
                            </option>
                        <% }) %>
                    </select>
                </div>
                <div class="col-md-5">
                    <label for="quantity<%= index %>" class="form-label">Quantity</label>
                    <input type="number" 
                           name="quantities[]" 
                           id="quantity<%= index %>" 
                           class="form-control" 
                           value="<%= sizeObj.quantity %>" 
                           min="0" 
                           >
                </div>
                <div class="col-md-2">
                    <% if (index === 0) { %>
                        <button type="button" class="btn btn-success mt-4" id="addSizeBtn">Add Size</button>
                    <% } else { %>
                        <button type="button" class="btn btn-danger mt-4 remove-size-btn" onclick="removeSize(this)">Remove</button>
                    <% } %>
                </div>
            </div>
        <% }) %>
    <% } %>
</div>
            
            <button type="submit" class="btn btn-primary">Update Variant</button>
        </form>
    </div>
</div>

    <!-- Crop Modal -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="img-container">
                        <img id="cropImage" src="" alt="Image to crop">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Required CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<style>
    .image-upload-container {
        width: 100%;
        position: relative;
    }

    .image-preview {
        width: 100%;
        height: 200px;
        border: 2px dashed #ccc;
        border-radius: 8px;
        position: relative;
        background-color: #f8f9fa;
        cursor: pointer;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background-size: cover;
        background-position: center;
    }

    .preview-text {
        color: #6c757d;
        text-align: center;
        padding: 10px;
    }

    .img-container {
        max-height: 500px;
        width: 100%;
        overflow: hidden;
    }

    #cropImage {
        max-width: 100%;
        max-height: 500px;
    }

    .object-fit-cover {
        object-fit: cover;
    }
</style>

<!-- Essential Scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<!-- Add this in your head or before closing body tag -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


 
<script>
    let cropper;
    let currentInput;
    let currentPreviewId;
    let currentImageIndex;
    let sizeCounter = '<%= variant.sizes ? variant.sizes.length : 1 %>';

    // Add Size Button Handler
    document.getElementById('addSizeBtn').addEventListener('click', function() {
        const sizesContainer = document.getElementById('sizesContainer');
        const sizeRows = sizesContainer.getElementsByClassName('size-row');
        const newIndex = sizeRows.length;
        
        const existingSizes = Array.from(sizesContainer.querySelectorAll('select[name="sizes[]"]'))
            .map(select => select.value);
        
        const newRow = document.createElement('div');
        newRow.className = 'row mb-3 size-row';
        newRow.innerHTML = `
            <div class="col-md-5">
                <label for="size${newIndex}" class="form-label">Size</label>
                <select name="sizes[]" id="size${newIndex}" class="form-control size-select" required>
                    ${[6, 7, 8, 9, 10].map(size => 
                        `<option value="${size}" ${existingSizes.includes(size.toString()) ? 'disabled' : ''}>
                            UK ${size}
                        </option>`
                    ).join('')}
                </select>
            </div>
            <div class="col-md-5">
                <label for="quantity${newIndex}" class="form-label">Quantity</label>
                <input type="number" 
                       name="quantities[]" 
                       id="quantity${newIndex}" 
                       class="form-control" 
                       min="0" 
                       required>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-danger mt-4 remove-size-btn" onclick="removeSize(this)">Remove</button>
            </div>
        `;
        
        sizesContainer.appendChild(newRow);
    });

    function removeSize(button) {
        const sizeRow = button.closest('.size-row');
        sizeRow.remove();
    }



    function updateSizeAvailability() {
        const sizesContainer = document.getElementById('sizesContainer');
        const sizeSelects = sizesContainer.querySelectorAll('.size-select');
        const selectedSizes = Array.from(sizeSelects)
            .map(select => select.value)
            .filter(size => size !== '');

        sizeSelects.forEach(select => {
            const options = select.querySelectorAll('option');
            options.forEach(option => {
                option.disabled = selectedSizes.filter(size => size === option.value).length > 1;
            });
        });
    }

    

    // Initial size availability update
    updateSizeAvailability();




    function handleImageUpload(input, previewId) {
        const file = input.files[0];
        if (!file) return;

        // Validation checks remain the same...

        currentInput = input;
        currentPreviewId = previewId;
        currentImageIndex = input.dataset.index;

        const reader = new FileReader();
        reader.onload = function(e) {
            const cropImage = document.getElementById('cropImage');
            cropImage.src = e.target.result;

            const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
            cropModal.show();

            cropImage.addEventListener('load', function() {
                if (cropper) cropper.destroy();
                cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 2,
                    autoCropArea: 1,
                    zoomable: true,
                    scalable: true,
                    movable: true,
                });
            });
        };
        reader.readAsDataURL(file);
    }



    document.getElementById('cropButton').addEventListener('click', function() {
        if (!cropper) return;

        const canvas = cropper.getCroppedCanvas({
            width: 600,
            height: 600,
            imageSmoothingQuality: 'high',
        });

        canvas.toBlob(function(blob) {
            const filename = currentInput.files[0].name;
            const croppedFile = new File([blob], filename, {
                type: 'image/jpeg',
                lastModified: new Date().getTime()
            });

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            currentInput.files = dataTransfer.files;

            // Update preview
            const preview = document.getElementById(`imagePreview${currentPreviewId}`);
            preview.innerHTML = `<img src="${URL.createObjectURL(blob)}" class="img-fluid w-100 h-100 object-fit-cover" alt="Preview">`;

            // Preserve other image filenames
            const hiddenInputs = document.getElementsByName('existingImages[]');
            const newFilename = filename;
            
            // Only update the specific image index's filename
            if (hiddenInputs[currentImageIndex]) {
                hiddenInputs[currentImageIndex].value = newFilename;
            }

            const cropModal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
            cropModal.hide();

            cropper.destroy();
            cropper = null;
        }, 'image/jpeg', 0.9);
    });




   // Add this to your existing script section in editVariant.ejs
document.getElementById('colorVariantForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Basic validation
    const color = document.querySelector('input[name="color"]').value.trim();
    if (!color) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Color is required'
        });
        return;
    }

    // Get all size rows
    const sizeRows = document.querySelectorAll('.size-row');
    if (sizeRows.length === 0) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'At least one size and quantity is required'
        });
        return;
    }

    // Create FormData
    const formData = new FormData(this);
    
    // Clear existing size and quantity arrays
    formData.delete('sizes[]');
    formData.delete('quantities[]');

    // Validate and add sizes and quantities
    const selectedSizes = new Set();
    const errors = [];

    sizeRows.forEach((row, index) => {
        const sizeSelect = row.querySelector('select[name="sizes[]"]');
        const quantityInput = row.querySelector('input[name="quantities[]"]');
        
        const size = sizeSelect.value;
        const quantity = quantityInput.value;

        // Validate size
        if (!size) {
            errors.push(`Size is required for row ${index + 1}`);
            return;
        }

        // Check for duplicate sizes
        if (selectedSizes.has(size)) {
            errors.push(`Size ${size} is selected multiple times`);
            return;
        }

        // Validate quantity
        if (!quantity || isNaN(quantity) || quantity < 0) {
            errors.push(`Invalid quantity for size ${size}`);
            return;
        }

        selectedSizes.add(size);
        formData.append('sizes[]', size);
        formData.append('quantities[]', quantity);
    });

    // Show errors if any
    if (errors.length > 0) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            html: errors.join('<br>')
        });
        return;
    }

    try {
        const response = await fetch(this.action, {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Variant updated successfully',
                timer: 1500,
                showConfirmButton: false
            }).then(() => {
                window.location.href = `/admin/productVariants/${formData.get('productId')}`;
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Update Failed',
                text: result.message || 'Error updating variant'
            });
        }
    } catch (error) {
        console.error('Form submission error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the variant'
        });
    }
});;

    // Add file input listeners
    document.querySelectorAll('.image-input').forEach((input, index) => {
        input.addEventListener('change', function(e) {
            handleImageUpload(this, index + 1);
        });
    });


    
</script>

<%- include("../../views/partials/admin/footer/") %>



This is my productSchema.js code:-
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    salesPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });



const Product = mongoose.model("Product", productSchema);

module.exports = Product;



This is my orderSchema.js code:- 
const mongoose = require('mongoose');
const { Schema } = mongoose;

const orderSchema = new Schema({
    orderId: {
        type: String,
        unique: true,
        default: function() {
           
            const timestamp = Date.now().toString().slice(-10);
            const randomStr = Math.random().toString(36).substr(2, 6).toUpperCase();
            return `ORD-${timestamp}-${randomStr}`;
        }
    },
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: {
            type: Schema.Types.ObjectId,
            ref: 'Product'
        },
        color: {
            type: String,
            required: true
        },
        size: {
            type: Number,
            required: true
        },
        quantity: {
            type: Number,
            required: true
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        },
        status: {
            type: String,
            enum: ['placed', 'cancelled'],
            default: 'placed'
        }
    }],
    // Embedded shipping address details
    shippingAddress: {
        name: {
            type: String,
            required: true,
            trim: true
        },
        addressType: {
            type: String,
            enum: ['Home', 'Work', 'Other'],
            required: true
        },
        city: {
            type: String,
            required: true,
            trim: true
        },
        landmark: {
            type: String,
            required: true,
            trim: true
        },
        state: {
            type: String,
            required: true,
            trim: true
        },
        pincode: {
            type: String,
            required: true,
            match: [/^[0-9]{6}$/, 'Please enter a valid 6-digit pincode']
        },
        phone: {
            type: String,
            required: true,
            validate: {
                validator: function(v) {
                    return /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        },
        altPhone: {
            type: String,
            validate: {
                validator: function(v) {
                    return v === '' || /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        }
    },
    paymentMethod: {
        type: String,
        required: true,
        enum: ['COD', 'paypal']
    },
    subtotal: {
        type: Number,
        required: true
    },
    shippingCost: {
        type: Number,
        required: true
    },
    total: {
        type: Number,
        required: true
    },
    paymentStatus: {
        type: String,
        enum: ['pending', 'paid', 'failed'],
        default: 'pending'
    },
    status: {
        type: String,
        required: true,
        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']
    }
}, { timestamps: true });

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;

This is my userSchema.js code :- 
const mongoose= require("mongoose");
const {Schema}= mongoose;

const userSchema= new Schema ({
    name:{
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique:true
    },
    phone: {
        type:String,
        required: false,
        unique: true,
        sparse:true,
        default:undefined
    },
    googleId:{
        type:String,
        unique:true,
        sparse:true
    },
    password: {
        type:String,
        required: false
    },
    isBlocked: {
        type: Boolean,
        default:false
    },
    isAdmin: {
        type: Boolean,
        default: false
    },
    cart: [{
        type: Schema.Types.ObjectId,
        ref: 'Cart'
    }],
    
    wallet: {
        type: Number,
        default:0,
    },
    wishlist: [{
        type: Schema.Types.ObjectId,
        ref: "wishlist"
    }],
    orderHistory: [{
        type: Schema.Types.ObjectId,
        ref: "Order"
    }],
    createdOn : {
        type:Date,
        default:Date.now,
    },
    referralCode: {
        type: String,
        // required:true
    },
    redeemed: {
        type: Boolean,
        // defaulte:false
 
    },
    redeemedUsers: [{
        type: Schema.Types.ObjectId,
        ref: "User",
        // required:true
    }],
    searchHistory: [{
        category: {
            type: Schema.Types.ObjectId,
            ref: "Category"
        },
        Brand: {
            type: String,

        },
        searchOn: {
            type: Date,
            default: Date.now
        }
    }]
},{timestamps:true})





const user= mongoose.model("User",userSchema);


module.exports= user




This is my addressSchema.js code:- 

const mongoose = require("mongoose");
const { Schema } = mongoose;

const addressSchema = new Schema({
    userId: {
        type: Schema.Types.ObjectId,
        ref: "User",
        required: true
    },
    address: [{
        addressType: {
            type: String,
            required: true,
            enum: ['Home', 'Work', 'Other']
        },
        name: {
            type: String,
            required: [true, 'Name is required'],
            trim: true
        },
        city: { 
            type: String,
            required: [true, 'City is required'],
            trim: true
        },
        landmark: {
            type: String,
            required: [true, 'Landmark is required'],
            trim: true
        },
        state: {
            type: String,
            required: [true, 'State is required'],
            trim: true
        },
        pincode: {
            type: String,
            required: [true, 'Pincode is required'],
            match: [/^[0-9]{6}$/, 'Please enter a valid 6-digit pincode']
        },
        phone: {
            type: String,
            required: [true, 'Phone number is required'],
            validate: {
                validator: function(v) {
                    return /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        },
        altPhone: {
            type: String,
            validate: {
                validator: function(v) {
                    return v === '' || /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        }
    }]
});

const Address = mongoose.model("Address", addressSchema);

module.exports = Address;

This is my adminRouter.js code:- 
router.get('/editVariant/:id', adminAuth, productController.editVariantForm);
router.post('/colorVariant/edit/:id', adminAuth, upload, productController.updateVariant);  



This is my productController.js code:- 
const editVariantForm = async (req, res) => {
    try {
        const variantId = req.params.id;
        
        // Find the product that contains the variant
        const product = await Product.findOne({ "variants._id": variantId });
        
        if (!product) {
            return res.status(404).send('Product not found');
        }

        // Get the specific variant
        const variant = product.variants.id(variantId);
        console.log('Variant in edit form:', JSON.stringify(variant, null, 2));

        
        if (!variant) {
            return res.status(404).send('Variant not found');
        }

        // Render the edit form with the product and variant data
        res.render('editVariant', { 
            product,
            variant,
            errorMessage: null
        });

    } catch (error) {
        console.error('Error in editVariantForm:', error);
        res.status(500).send('Server Error');
    }
};



// Update Color Variant
const updateVariant = async (req, res) => {
    try {
        const variantId = req.params.id;
        const { color, sizes, quantities } = req.body;

        // Find product containing the variant
        const product = await Product.findOne({ "variants._id": variantId });
        if (!product) {
            return res.status(404).json({
                success: false,
                message: 'Product not found'
            });
        }

        // Get the variant
        const variant = product.variants.id(variantId);
        if (!variant) {
            return res.status(404).json({
                success: false,
                message: 'Variant not found'
            });
        }

        // Ensure sizes and quantities are arrays
        const sizeArray = Array.isArray(sizes) ? sizes : [sizes];
        const quantityArray = Array.isArray(quantities) ? quantities : [quantities];

        // Validate input
        if (!sizeArray || !quantityArray || sizeArray.length !== quantityArray.length) {
            return res.status(400).json({
                success: false,
                message: 'Invalid sizes or quantities format'
            });
        }

        // Validate and process sizes
        const processedSizes = [];
        const uniqueSizes = new Set();

        for (let i = 0; i < sizeArray.length; i++) {
            const size = parseInt(sizeArray[i]);
            const quantity = parseInt(quantityArray[i]);

            // Validate size and quantity
            if (isNaN(size) || isNaN(quantity) || quantity < 0) {
                return res.status(400).json({
                    success: false,
                    message: `Invalid size or quantity at position ${i + 1}`
                });
            }

            // Check for duplicate sizes
            if (uniqueSizes.has(size)) {
                return res.status(400).json({
                    success: false,
                    message: `Duplicate size ${size} found`
                });
            }

            uniqueSizes.add(size);
            processedSizes.push({
                size: size,
                quantity: quantity
            });
        }

        // Update variant
        variant.color = color;
        variant.sizes = processedSizes;

        // Handle image updates if any are uploaded
        if (req.files && req.files.length > 0) {
            const images = await Promise.all(req.files.map(async (file, index) => {
                const filename = `${Date.now()}-${index}-${file.originalname}`;
                const outputPath = path.join('public', 'uploads', 'product-images', filename);
                
                await sharp(file.buffer)
                    .jpeg({ quality: 90 })
                    .toFile(outputPath);
                
                return {
                    filename,
                    contentType: 'image/jpeg'
                };
            }));

            // Update images if new ones are uploaded
            variant.images = images;
        }

        // Save the updated product
        await product.save();

        res.json({
            success: true,
            message: 'Variant updated successfully'
        });

    } catch (error) {
        console.error('Error updating variant:', error);
        res.status(500).json({
            success: false,
            message: 'Server error updating variant'
        });
    }
};

This is my editVariant.ejs code:- 
<%- include("../../views/partials/admin/header/") %>

<div class="container mt-4">
    <h4>Edit Variant for <%= product.productName %></h4>
    
    <% if (errorMessage) { %>
        <div class="alert alert-danger" role="alert">
            <%= errorMessage %>
        </div>
    <% } %>
    
    <!-- Edit Variant Form -->
    <div class="card p-4 mb-4">
        <form id="colorVariantForm" 
      action="/admin/colorVariant/edit/<%= variant._id %>" 
      method="POST" 
      enctype="multipart/form-data">
            <input type="hidden" name="productId" value="<%= product._id %>">
            
            <!-- Color Input -->
            <div class="mb-3">
                <label for="color" class="form-label">Color</label>
                <input type="text" 
                       name="color" 
                       id="color" 
                       class="form-control" 
                       value="<%= variant.color %>" 
                       >
                <div class="error-message" id="color-error" style="display:none; color:red;"></div>
            </div>

            <!-- Image Uploads -->
            <div class="mb-3">
                <label class="form-label">Product Images</label>
                <div class="row">
                    <% for(let i = 1; i <= 3; i++) { %>
                        <div class="col-md-4 mb-2">
                            <div class="image-upload-container">
                                <input class="form-control d-none image-input" 
                                       type="file" 
                                       id="productImage<%= i %>" 
                                       name="images" 
                                       data-index="<%= i-1 %>"
                                       accept="image/*">
                                <input type="hidden" name="existingImages[]" value="<%= variant.images && variant.images[i-1] ? variant.images[i-1].filename : '' %>">
                                <div id="imagePreview<%= i %>" class="image-preview" onclick="document.getElementById('productImage<%= i %>').click()">
                                    <% if (variant.images && variant.images[i-1] && variant.images[i-1].filename) { %>
                                        <img src="/uploads/product-images/<%= variant.images[i-1].filename %>" 
                                             alt="Product Image <%= i %>" 
                                             class="img-fluid w-100 h-100 object-fit-cover">
                                    <% } else { %>
                                        <div class="preview-text">Upload Image <%= i %></div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Sizes Container -->
           <!-- Sizes Container -->
<div id="sizesContainer">
    <% if (variant.sizes && variant.sizes.length > 0) { %>
        <% variant.sizes.forEach((sizeObj, index) => { %>
            <div class="row mb-3 size-row">
                <div class="col-md-5">
                    <label for="size<%= index %>" class="form-label">Size</label>
                    <select name="sizes[]" id="size<%= index %>" class="form-control size-select" >
                        <% [6, 7, 8, 9, 10].forEach(size => { %>
                            <option value="<%= size %>" 
                                    <%= sizeObj.size === size ? 'selected' : '' %>>
                                UK <%= size %>
                            </option>
                        <% }) %>
                    </select>
                </div>
                <div class="col-md-5">
                    <label for="quantity<%= index %>" class="form-label">Quantity</label>
                    <input type="number" 
                           name="quantities[]" 
                           id="quantity<%= index %>" 
                           class="form-control" 
                           value="<%= sizeObj.quantity %>" 
                           min="0" 
                           >
                </div>
                <div class="col-md-2">
                    <% if (index === 0) { %>
                        <button type="button" class="btn btn-success mt-4" id="addSizeBtn">Add Size</button>
                    <% } else { %>
                        <button type="button" class="btn btn-danger mt-4 remove-size-btn" onclick="removeSize(this)">Remove</button>
                    <% } %>
                </div>
            </div>
        <% }) %>
    <% } %>
</div>
            
            <button type="submit" class="btn btn-primary">Update Variant</button>
        </form>
    </div>
</div>

    <!-- Crop Modal -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="img-container">
                        <img id="cropImage" src="" alt="Image to crop">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Required CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<style>
    .image-upload-container {
        width: 100%;
        position: relative;
    }

    .image-preview {
        width: 100%;
        height: 200px;
        border: 2px dashed #ccc;
        border-radius: 8px;
        position: relative;
        background-color: #f8f9fa;
        cursor: pointer;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background-size: cover;
        background-position: center;
    }

    .preview-text {
        color: #6c757d;
        text-align: center;
        padding: 10px;
    }

    .img-container {
        max-height: 500px;
        width: 100%;
        overflow: hidden;
    }

    #cropImage {
        max-width: 100%;
        max-height: 500px;
    }

    .object-fit-cover {
        object-fit: cover;
    }
</style>

<!-- Essential Scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<!-- Add this in your head or before closing body tag -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


 
<script>
    let cropper;
    let currentInput;
    let currentPreviewId;
    let currentImageIndex;
    let sizeCounter = '<%= variant.sizes ? variant.sizes.length : 1 %>';

    // Add Size Button Handler
    document.getElementById('addSizeBtn').addEventListener('click', function() {
        const sizesContainer = document.getElementById('sizesContainer');
        const sizeRows = sizesContainer.getElementsByClassName('size-row');
        const newIndex = sizeRows.length;
        
        const existingSizes = Array.from(sizesContainer.querySelectorAll('select[name="sizes[]"]'))
            .map(select => select.value);
        
        const newRow = document.createElement('div');
        newRow.className = 'row mb-3 size-row';
        newRow.innerHTML = `
            <div class="col-md-5">
                <label for="size${newIndex}" class="form-label">Size</label>
                <select name="sizes[]" id="size${newIndex}" class="form-control size-select" required>
                    ${[6, 7, 8, 9, 10].map(size => 
                        `<option value="${size}" ${existingSizes.includes(size.toString()) ? 'disabled' : ''}>
                            UK ${size}
                        </option>`
                    ).join('')}
                </select>
            </div>
            <div class="col-md-5">
                <label for="quantity${newIndex}" class="form-label">Quantity</label>
                <input type="number" 
                       name="quantities[]" 
                       id="quantity${newIndex}" 
                       class="form-control" 
                       min="0" 
                       required>
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-danger mt-4 remove-size-btn" onclick="removeSize(this)">Remove</button>
            </div>
        `;
        
        sizesContainer.appendChild(newRow);
    });

    function removeSize(button) {
        const sizeRow = button.closest('.size-row');
        sizeRow.remove();
    }



    function updateSizeAvailability() {
        const sizesContainer = document.getElementById('sizesContainer');
        const sizeSelects = sizesContainer.querySelectorAll('.size-select');
        const selectedSizes = Array.from(sizeSelects)
            .map(select => select.value)
            .filter(size => size !== '');

        sizeSelects.forEach(select => {
            const options = select.querySelectorAll('option');
            options.forEach(option => {
                option.disabled = selectedSizes.filter(size => size === option.value).length > 1;
            });
        });
    }

    

    // Initial size availability update
    updateSizeAvailability();




    function handleImageUpload(input, previewId) {
        const file = input.files[0];
        if (!file) return;

        // Validation checks remain the same...

        currentInput = input;
        currentPreviewId = previewId;
        currentImageIndex = input.dataset.index;

        const reader = new FileReader();
        reader.onload = function(e) {
            const cropImage = document.getElementById('cropImage');
            cropImage.src = e.target.result;

            const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
            cropModal.show();

            cropImage.addEventListener('load', function() {
                if (cropper) cropper.destroy();
                cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 2,
                    autoCropArea: 1,
                    zoomable: true,
                    scalable: true,
                    movable: true,
                });
            });
        };
        reader.readAsDataURL(file);
    }



    document.getElementById('cropButton').addEventListener('click', function() {
        if (!cropper) return;

        const canvas = cropper.getCroppedCanvas({
            width: 600,
            height: 600,
            imageSmoothingQuality: 'high',
        });

        canvas.toBlob(function(blob) {
            const filename = currentInput.files[0].name;
            const croppedFile = new File([blob], filename, {
                type: 'image/jpeg',
                lastModified: new Date().getTime()
            });

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            currentInput.files = dataTransfer.files;

            // Update preview
            const preview = document.getElementById(`imagePreview${currentPreviewId}`);
            preview.innerHTML = `<img src="${URL.createObjectURL(blob)}" class="img-fluid w-100 h-100 object-fit-cover" alt="Preview">`;

            // Preserve other image filenames
            const hiddenInputs = document.getElementsByName('existingImages[]');
            const newFilename = filename;
            
            // Only update the specific image index's filename
            if (hiddenInputs[currentImageIndex]) {
                hiddenInputs[currentImageIndex].value = newFilename;
            }

            const cropModal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
            cropModal.hide();

            cropper.destroy();
            cropper = null;
        }, 'image/jpeg', 0.9);
    });




   // Add this to your existing script section in editVariant.ejs
document.getElementById('colorVariantForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Basic validation
    const color = document.querySelector('input[name="color"]').value.trim();
    if (!color) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Color is required'
        });
        return;
    }

    // Get all size rows
    const sizeRows = document.querySelectorAll('.size-row');
    if (sizeRows.length === 0) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'At least one size and quantity is required'
        });
        return;
    }

    // Create FormData
    const formData = new FormData(this);
    
    // Clear existing size and quantity arrays
    formData.delete('sizes[]');
    formData.delete('quantities[]');

    // Validate and add sizes and quantities
    const selectedSizes = new Set();
    const errors = [];

    sizeRows.forEach((row, index) => {
        const sizeSelect = row.querySelector('select[name="sizes[]"]');
        const quantityInput = row.querySelector('input[name="quantities[]"]');
        
        const size = sizeSelect.value;
        const quantity = quantityInput.value;

        // Validate size
        if (!size) {
            errors.push(`Size is required for row ${index + 1}`);
            return;
        }

        // Check for duplicate sizes
        if (selectedSizes.has(size)) {
            errors.push(`Size ${size} is selected multiple times`);
            return;
        }

        // Validate quantity
        if (!quantity || isNaN(quantity) || quantity < 0) {
            errors.push(`Invalid quantity for size ${size}`);
            return;
        }

        selectedSizes.add(size);
        formData.append('sizes[]', size);
        formData.append('quantities[]', quantity);
    });

    // Show errors if any
    if (errors.length > 0) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            html: errors.join('<br>')
        });
        return;
    }

    try {
        const response = await fetch(this.action, {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Variant updated successfully',
                timer: 1500,
                showConfirmButton: false
            }).then(() => {
                window.location.href = `/admin/productVariants/${formData.get('productId')}`;
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Update Failed',
                text: result.message || 'Error updating variant'
            });
        }
    } catch (error) {
        console.error('Form submission error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the variant'
        });
    }
});;

    // Add file input listeners
    document.querySelectorAll('.image-input').forEach((input, index) => {
        input.addEventListener('change', function(e) {
            handleImageUpload(this, index + 1);
        });
    });
</script>

<%- include("../../views/partials/admin/footer/") %>







<script>


const updateVariant = async (req, res) => {
    try {
        const variantId = req.params.id;
        const { color, sizes, quantities, existingImages } = req.body;

        // Find product containing the variant
        const product = await Product.findOne({ "variants._id": variantId });
        if (!product) {
            return res.status(404).json({
                success: false,
                message: 'Product not found'
            });
        }

        // Get the variant
        const variant = product.variants.id(variantId);
        if (!variant) {
            return res.status(404).json({
                success: false,
                message: 'Variant not found'
            });
        }

        // ... (previous size and quantity validation code remains the same)

        // Handle image updates if any are uploaded
        if (req.files && req.files.length > 0) {
            const newImages = await Promise.all(req.files.map(async (file, index) => {
                const filename = `${Date.now()}-${index}-${file.originalname}`;
                const outputPath = path.join('public', 'uploads', 'product-images', filename);
                
                await sharp(file.buffer)
                    .jpeg({ quality: 90 })
                    .toFile(outputPath);
                
                return {
                    filename,
                    contentType: 'image/jpeg'
                };
            }));

            // Create a copy of existing images to modify
            const updatedImages = [...variant.images];

            // Replace images at specific positions where new images are uploaded
            newImages.forEach((newImage, index) => {
                // If a new image is uploaded, replace the image at that index
                if (req.files[index]) {
                    updatedImages[index] = newImage;
                }
            });

            // Update variant images
            variant.images = updatedImages;
        }

        // Save the updated product
        await product.save();

        res.json({
            success: true,
            message: 'Variant updated successfully'
        });

    } catch (error) {
        console.error('Error updating variant:', error);
        res.status(500).json({
            success: false,
            message: 'Server error updating variant'
        });
    }
};
</script>

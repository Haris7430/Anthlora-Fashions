
This is my productSchema.js code:- 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });



const Product = mongoose.model("Product", productSchema);

module.exports = Product;


This is my couponSchema.js code:- 
const mongoose = require('mongoose');

const couponSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true,
        trim: true
    },
    description: {
        type: String,
        trim: true
    },
    code: {
        type: String,
        required: true,
        unique: true,
        uppercase: true,
        trim: true
    },
    validFrom: {
        type: Date,
        required: true
    },
    expiryDate: {
        type: Date,
        required: true
    },
    discountPercentage: {
        type: Number,
        required: true,
        min: 1,
        max: 80
    },
    minPurchaseLimit: {
        type: Number,
        default: 0,
        min: 0
    },
    status: {
        type: String,
        enum: ['active', 'inactive'],
        default: 'active'
    }
}, { timestamps: true });

const Coupon = mongoose.model('Coupon', couponSchema);

module.exports = Coupon;

This is my userRouter.js code:- 
router.get('/userCart',userAuth, userCartController.getCartPage); 
router.post('/addToCart/:id', userAuth, userCartController.addToCart);
router.delete('/removeFromCart/:productId', userAuth, userCartController.removeFromCart);
router.put('/updateCart/:productId', userAuth, userCartController.updateCart);
router.get('/check-stock/:productId', userAuth, userCartController.checkStockAvailability);


This is my userCartController.js code:- 
const User = require('../../models/userSchema');
const Category = require('../../models/categorySchema');
const Product = require('../../models/productSchema');
const Cart = require('../../models/cartSchema');
const Offer = require('../../models/offerSchema');

const getCartPage = async (req, res) => {
    try {
        if (!req.session.user) {
            return res.redirect('/login');
        }

        const cart = await Cart.findOne({ userId: req.session.user._id })
            .populate({
                path: 'items.productId',
                model: 'Product',
                populate: {
                    path: 'variants',
                    model: 'Product'
                }
            });

        if (!cart) {
            return res.render('userCart', { 
                cart: { items: [] },
                subtotal: 0
            });
        }

        // Find applicable offers for each product in the cart
        const cartItemsWithOffers = await Promise.all(cart.items.map(async (item) => {
            // Find applicable offers for the product
            const offers = await Offer.find({
                $or: [
                    { offerType: 'product', productIds: item.productId._id },
                    { offerType: 'category', categoryIds: item.productId.category }
                ],
                status: 'active',
                expireDate: { $gte: new Date() }
            });

            // Find the maximum discount offer
            let maxOffer = null;
            let originalPrice = item.price;
            let discountedPrice = item.price;

            if (offers.length > 0) {
                maxOffer = offers.reduce((max, offer) => 
                    offer.discount > (max ? max.discount : 0) ? offer : max
                , null);

                if (maxOffer) {
                    discountedPrice = originalPrice * (1 - maxOffer.discount / 100);
                }
            }

            return {
                ...item.toObject(),
                originalPrice: originalPrice,
                price: discountedPrice,
                totalPrice: discountedPrice * item.quantity,
                offer: maxOffer ? {
                    offerName: maxOffer.offerName,
                    discount: maxOffer.discount
                } : null
            };
        }));

        // Create a new cart object with updated items
        const updatedCart = {
            ...cart.toObject(),
            items: cartItemsWithOffers
        };

        // Recalculate subtotal with discounted prices
        const subtotal = cartItemsWithOffers.reduce((sum, item) => sum + item.totalPrice, 0);

        res.render('userCart', { 
            cart: updatedCart, 
            subtotal 
        });
    } catch (error) {
        console.error(error);
        res.status(500).send("Internal Server Error");
    }
}; 

const addToCart = async (req, res) => {
    try {
        if (!req.session.user) {
            return res.status(401).json({ 
                status: 'unauthorized', 
                message: 'Please log in to add items to cart' 
            });
        }

        const productId = req.params.id;
        const userId = req.session.user._id;
        const { quantity = 1, size, variantId } = req.body;

        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ 
                status: 'error',
                message: "Product not found" 
            });
        }

        // Validate quantity
        if (quantity > 5) {
            return res.status(400).json({ 
                status: 'error',
                message: "Cannot add more than 5 of this product" 
            });
        }

        // Find the specific variant
        const selectedVariant = product.variants.find(v => 
            v._id && variantId && v._id.toString() === variantId.toString()
        );

        if (!selectedVariant) {
            return res.status(404).json({ 
                status: 'error',
                message: "Selected variant not found" 
            });
        }

        // Check available quantity for specific size
        const sizeObj = selectedVariant.sizes.find(s => s.size === parseInt(size));
        if (!sizeObj || sizeObj.quantity < quantity) {
            return res.status(400).json({ 
                status: 'error',
                message: `Only ${sizeObj ? sizeObj.quantity : 0} items available in stock` 
            });
        }

        // Find or create cart
        let cart = await Cart.findOne({ userId });
        if (!cart) {
            cart = new Cart({ userId, items: [] });
        }

        // Check if item already exists in cart with same product, variant, and size
        const existingItemIndex = cart.items.findIndex(item => 
            item.productId && productId && 
            item.productId.toString() === productId.toString() &&
            item.variantId && variantId && 
            item.variantId.toString() === variantId.toString() &&
            item.size === parseInt(size)
        );

        if (existingItemIndex !== -1) {
            return res.status(400).json({ 
                status: 'error',
                message: "Product with this variant and size already in the cart" 
            });
        }

        // Add new item to cart (using regular price)
        cart.items.push({
            productId,
            variantId: selectedVariant._id,
            size: parseInt(size),
            color: selectedVariant.color,
            quantity,
            price: product.regularPrice,
            totalPrice: product.regularPrice * quantity,
            availableQuantity: sizeObj.quantity
        });

        await cart.save();
        return res.status(200).json({ 
            status: 'success', 
            message: "Product added to cart successfully" 
        });
    } catch (error) {
        console.error('Add to cart error:', error);
        res.status(500).json({ 
            status: 'error', 
            message: "Server error" 
        });
    }
};

const updateCart = async (req, res) => {
    try {
        if (!req.session.user) {
            return res.status(401).json({ message: 'Unauthorized' });
        }

        const { productId } = req.params;
        const { quantity, color, size, variantId } = req.body;
        const userId = req.session.user._id;

        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: "Product not found" });
        }

        // Find the specific variant
        const variant = product.variants.find(v => 
            v._id.toString() === variantId && v.color === color
        );
        if (!variant) {
            return res.status(404).json({ message: "Variant not found" });
        }

        // Check stock availability for specific size
        const sizeObj = variant.sizes.find(s => s.size === parseInt(size));
        if (!sizeObj || sizeObj.quantity < quantity) {
            return res.status(400).json({ 
                message: `Only ${sizeObj ? sizeObj.quantity : 0} items available in stock for this size` 
            });
        }

        // Quantity limit check
        if (quantity > 5) {
            return res.status(400).json({ 
                message: "Cannot add more than 5 items of this product" 
            });
        }

        // Find the cart
        const userCart = await Cart.findOne({ userId });
        if (!userCart) {
            return res.status(404).json({ message: "Cart not found" });
        }

        // Find the specific cart item with matching product, variant, and size
        const itemIndex = userCart.items.findIndex(
            item => item.productId.toString() === productId &&
                    item.variantId.toString() === variantId &&
                    item.color === color &&
                    item.size === parseInt(size)
        );
        
        if (itemIndex !== -1) {
            // Find applicable offers for the product
            const offers = await Offer.find({
                $or: [
                    { offerType: 'product', productIds: productId },
                    { offerType: 'category', categoryIds: product.category }
                ],
                status: 'active',
                expireDate: { $gte: new Date() }
            });

            // Determine the maximum discount offer
            let maxOffer = null;
            let originalPrice = product.regularPrice;
            let price = originalPrice;

            if (offers.length > 0) {
                maxOffer = offers.reduce((max, offer) => 
                    offer.discount > (max ? max.discount : 0) ? offer : max
                , null);

                if (maxOffer) {
                    price = originalPrice * (1 - maxOffer.discount / 100);
                }
            }

            // Update quantity and total price for the specific item
            userCart.items[itemIndex].quantity = quantity;
            userCart.items[itemIndex].price = price;
            userCart.items[itemIndex].totalPrice = price * quantity;
            userCart.items[itemIndex].availableQuantity = sizeObj.quantity;

            // Optional: Update offer details in cart item if needed
            if (maxOffer) {
                userCart.items[itemIndex].offer = {
                    offerName: maxOffer.offerName,
                    discount: maxOffer.discount,
                    originalPrice: originalPrice
                };
            }
            
            await userCart.save();
            
            // Recalculate subtotal
            const subtotal = userCart.items.reduce((sum, item) => sum + item.totalPrice, 0);
            
            return res.status(200).json({
                cart: userCart,
                subtotal: subtotal
            });
        }

        return res.status(404).json({ message: "Item not found in cart" });
    } catch (error) {
        console.error('Error updating cart:', error);
        res.status(500).json({ message: "Server error" });
    }
};



const removeFromCart = async (req, res) => {
    try {
        if (!req.session.user) {
            return res.status(401).json({ message: 'Unauthorized' });
        }

        const { productId } = req.params; 
        const { color, size, variantId } = req.query; 
        const userId = req.session.user._id; 

        const cart = await Cart.findOne({ userId });
        
        if (!cart) {
            return res.status(404).json({ message: 'Cart not found' });
        }

        const initialItemsCount = cart.items.length;

        // Remove item from cart items
        cart.items = cart.items.filter(
            item => !(
                item.productId.toString() === productId &&
                item.color === color &&
                item.size === parseInt(size) &&
                item.variantId.toString() === variantId
            )
        );

        // Check if any item was removed
        if (cart.items.length === initialItemsCount) {
            return res.status(404).json({ message: 'Item not found in cart' });
        }

        // Save updated cart
        await cart.save();

        res.status(200).json({ message: 'Item removed from cart' });
    } catch (error) {
        console.error('Error removing item from cart:', error);
        res.status(500).json({ message: 'Error removing item from cart' });
    }
};



const checkStockAvailability = async (req, res) => {
    try {
        const { productId } = req.params;
        const { color, size, variantId } = req.query;

        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        const variant = product.variants.find(v => 
            v._id.toString() === variantId && v.color === color
        );

        if (!variant) {
            return res.status(404).json({ message: 'Variant not found' });
        }

        const sizeObj = variant.sizes.find(s => s.size === parseInt(size));

        return res.json({ 
            availableQuantity: sizeObj ? sizeObj.quantity : 0,
            variantId: variant._id
        });
    } catch (error) {
        console.error('Error checking stock:', error);
        res.status(500).json({ message: 'Server error' });
    }
};


This is my userCart.ejs page code:- 

<%- include("../../views/partials/user/header/") %>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<style>

.offer-badge {
        background-color: #28a745;
        color: white;
        padding: 2px 5px;
        border-radius: 3px;
        font-size: 0.8em;
        margin-left: 10px;
    }


.product-image-link {
    cursor: pointer;
    transition: opacity 0.3s ease;
}

.product-image-link:hover {
    opacity: 0.8;
}



    .cart-quantity-control {
        display: flex;
        align-items: center;
        border: 1px solid #e0e0e0;
        height: 40px;
    }

    .cart-quantity-control button {
        width: 40px;
        height: 40px;
        background-color: transparent;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .cart-quantity-control button:hover {
        background-color: #f0f0f0;
    }

    .cart-quantity-control button i {
        font-size: 16px;
        color: #333;
    }

    .cart-quantity-control input {
        width: 50px;
        text-align: center;
        border: none;
        outline: none;
        font-size: 16px;
        background-color: white;
        flex-grow: 1;
        padding: 0 10px;
    }

    .cart-quantity-control button:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .cart-product-details {
        display: flex;
        align-items: center;
    }

    .cart-product-details img {
        margin-right: 15px;
        width: 80px;
        height: 80px;
        object-fit: cover;
    }

    .cart-product-info {
        display: flex;
        flex-direction: column;
    }
</style>

<!-- Start Banner Area -->
<section class="banner-area organic-breadcrumb">
    <div class="container">
        <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
            <div class="col-first">
                <h1>Shopping Cart</h1>
                <nav class="d-flex align-items-center">
                    <a href="index.html">Home<span class="lnr lnr-arrow-right"></span></a>
                    <a href="category.html">Cart</a>
                </nav>
            </div>
        </div>
    </div>
</section>
<!-- End Banner Area -->

<!--================Cart Area =================-->
<section class="cart_area">
    <div class="container">
        <div class="cart_inner">
            <% if (cart.items.length === 0) { %>
                <div class="text-center">
                    <p>Your cart is empty.</p>
                    <a href="/shop-page" class="primary-btn">Continue Shopping</a>
                </div>
            <% } else { %>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Product Details</th>
                                <th scope="col">Unit Price</th>
                                <th scope="col">Quantity</th>
                                <th scope="col">Total</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% cart.items.forEach(item => { 
        const variant = item.productId.variants.find(v => v.color === item.color);
        const productOffer = item.offer; // New offer information
    %>
    <tr data-product-id="<%= item.productId._id %>" 
        data-variant-color="<%= item.color %>"
        data-variant-size="<%= item.size %>">
        <td>
            <div class="cart-product-details">
                <% if (variant && variant.images && variant.images.length > 0) { %>
                    <a href="/productDetails?id=<%= item.productId._id %>" class="product-image-link">
                        <img src="/uploads/product-images/<%= variant.images[0].filename %>" 
                             alt="<%= item.productId.productName %>" 
                             class="cart-product-image">
                    </a>
                <% } else { %>
                    <a href="/productDetails?id=<%= item.productId._id %>" class="product-image-link">
                        <img src="/images/default-product.jpg" 
                             alt="<%= item.productId.productName %>" 
                             class="cart-product-image">
                    </a>
                <% } %>
                <div class="cart-product-info">
                    <p class="mb-1"><%= item.productId.productName %></p>
                    <small class="text-muted">Color: <%= item.color %>, Size: UK <%= item.size %></small>
                    <% if (item.offer) { %>
                        <span class="offer-badge"><%= item.offer.offerName %> (<%= item.offer.discount %>% OFF)</span>
                    <% } %>
                </div>
            </div>
        </td>
        <td>
            <h5>
                <% if (item.offer) { %>
                    <span class="text-muted" style="text-decoration: line-through;">₹<%= item.originalPrice.toFixed(2) %></span>
                    <span>₹<%= item.price.toFixed(2) %></span>
                <% } else { %>
                    ₹<%= item.price.toFixed(2) %>
                <% } %>
            </h5>
        </td>
                                <td>
                                    <div class="cart-quantity-control">
                                        <button onclick="decreaseQuantity('<%= item.productId._id %>', '<%= item.color %>', '<%= item.size %>')" 
                                                class="btn btn-sm decrease"
                                                aria-label="Decrease Quantity">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                        <input type="text" 
                                               name="qty" 
                                               id="sst<%= item.productId._id %>" 
                                               value="<%= item.quantity %>" 
                                               title="Quantity:" 
                                               class="input-text qty text-center" 
                                               min="1" 
                                               max="5"
                                               data-price="<%= item.price %>"
                                               data-color="<%= item.color %>"
                                               data-size="<%= item.size %>"
                                               data-variant-id="<%= variant._id %>"
                                               readonly>
                                        <button onclick="increaseQuantity('<%= item.productId._id %>', '<%= variant._id %>', '<%= item.size %>', '<%= item.color %>')" 
                                                class="btn btn-sm increase"
                                                aria-label="Increase Quantity">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                </td>
                                <td>
                                    <h5 class="total-price" id="totalPrice<%= item.productId._id %>">
                                        ₹<%= item.totalPrice.toFixed(2) %>
                                    </h5>
                                </td>
                                <td>
                                    <button onclick="removeFromCart('<%= item.productId._id %>', '<%= item.color %>', '<%= item.size %>')" 
                                            class="btn btn-danger btn-sm">
                                        Remove
                                    </button>
                                </td>
                            </tr>
                            <% }); %>
                            <tr>
                                <td colspan="3">
                                    <h5 class="text-right">Subtotal</h5>
                                </td>
                                <td>
                                    <h5 id="subtotal">₹<%= subtotal.toFixed(2) %></h5>
                                </td>
                                <td></td>
                            </tr>
                            <tr class="out_button_area">
                                <td colspan="5">
                                    <div class="checkout_btn_inner d-flex align-items-center justify-content-end">
                                        <a class="gray_btn mr-3" href="/shop-page">Continue Shopping</a>
                                        <a class="primary-btn" href="/checkout">Proceed to checkout</a>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            <% } %>
        </div>
    </div>
</section>
<!--================End Cart Area =================-->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Axios-based implementation
    function increaseQuantity(productId, variantId, size, color) {
        const row = document.querySelector(`tr[data-product-id="${productId}"][data-variant-color="${color}"][data-variant-size="${size}"]`);
        const quantityInput = row.querySelector('.qty');
        const currentQuantity = parseInt(quantityInput.value);
    
        // Validate max quantity
        if (currentQuantity >= 5) {
            Swal.fire({
                icon: 'warning',
                title: 'Maximum Quantity Reached',
                text: 'You cannot add more than 5 items of this product.'
            });
            return;
        }
    
        // Use Axios to check stock
        axios.get(`/check-stock/${productId}`, {
            params: {
                color: color,
                size: size,
                variantId: variantId
            }
        })
        .then(response => {
            const stockData = response.data;
            if (currentQuantity + 1 > stockData.availableQuantity) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Insufficient Stock',
                    text: `Only ${stockData.availableQuantity} items available for this size and variant.`
                });
                return;
            }
    
            // Proceed with quantity update
            updateQuantity(productId, currentQuantity + 1, color, size, variantId);
        })
        .catch(error => {
            console.error('Error checking stock:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to check stock availability'
            });
        });
    }
    
    function decreaseQuantity(productId, color, size) {
        const row = document.querySelector(`tr[data-product-id="${productId}"][data-variant-color="${color}"][data-variant-size="${size}"]`);
        const quantityInput = row.querySelector('.qty');
        const currentQuantity = parseInt(quantityInput.value);
        const variantId = quantityInput.getAttribute('data-variant-id');
    
        if (currentQuantity > 1) {
            updateQuantity(productId, currentQuantity - 1, color, size, variantId);
        }
    }
    
    function updateQuantity(productId, newQuantity, color, size, variantId) {
        axios.put(`/updateCart/${productId}`, { 
            quantity: newQuantity, 
            color: color,
            size: size,
            variantId: variantId
        })
        .then(response => {
            const data = response.data;
            
            // Find the specific row for this product, variant, and size
            const row = document.querySelector(
                `tr[data-product-id="${productId}"][data-variant-color="${color}"][data-variant-size="${size}"]`
            );
            
            // Update quantity input
            const quantityInput = row.querySelector('.qty');
            quantityInput.value = newQuantity;
            
            // Update total price for the specific item
            const totalPriceElement = row.querySelector('.total-price');
            const itemInCart = data.cart.items.find(item => 
                item.productId.toString() === productId && 
                item.variantId.toString() === variantId &&
                item.color === color && 
                item.size === parseInt(size)
            );
            
            // Update item's total price and offer details
            const priceContainer = row.querySelector('h5');
            if (itemInCart.offer) {
                priceContainer.innerHTML = `
                    <span class="text-muted" style="text-decoration: line-through;">₹${itemInCart.originalPrice.toFixed(2)}</span>
                    <span>₹${itemInCart.price.toFixed(2)}</span>
                `;
            } else {
                priceContainer.textContent = `₹${itemInCart.price.toFixed(2)}`;
            }
            
            // Update total price cell
            totalPriceElement.textContent = `₹${itemInCart.totalPrice.toFixed(2)}`;
            
            // Update cart subtotal
            const subtotalElement = document.getElementById('subtotal');
            subtotalElement.textContent = `₹${data.subtotal.toFixed(2)}`;
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to update cart quantity'
            });
        });
    }
    
    function removeFromCart(productId, color, size) {
    // Find the specific variant for this product
    const row = document.querySelector(`tr[data-product-id="${productId}"][data-variant-color="${color}"][data-variant-size="${size}"]`);
    const variantId = row.querySelector('.qty').getAttribute('data-variant-id');

    Swal.fire({
        title: 'Remove Item',
        text: 'Are you sure you want to remove this item from your cart?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!'
    }).then((result) => {
        if (result.isConfirmed) {
            axios.delete(`/removeFromCart/${productId}`, {
                params: { color, size, variantId }
            })
            .then(response => {
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to remove item from cart'
                });
            });
        }
    });
}
    </script>
    
    <%- include("../../views/partials/user/footer/") %>


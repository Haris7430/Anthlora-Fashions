
This is my productSchema.js code:- 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });



const Product = mongoose.model("Product", productSchema);

module.exports = Product;


This is my couponSchema.js code:- 
const mongoose = require('mongoose');

const couponSchema = new mongoose.Schema({
    title: {
        type: String,
        required: true,
        trim: true,
        validate: {
            validator: function(v) {
                // Allow letters, numbers, and spaces
                return /^[A-Za-z0-9\s]+$/.test(v);
            },
            message: props => `${props.value} is not a valid title! Only letters, numbers, and spaces are allowed.`
        }
    },
    description: {
        type: String,
        trim: true
    },
    code: {
        type: String,
        required: true,
        unique: true,
        uppercase: true,
        trim: true
    },
    validFrom: {
        type: Date,
        required: true
    },
    expiryDate: {
        type: Date,
        required: true
    },
    discountPercentage: {
        type: Number,
        required: true,
        min: 1,
        max: 80
    },
    maxDiscountAmount: {
        type: Number,
        required: true,
        validate: {
            validator: function(v) {
                return typeof v === 'number' && v >= 0;
            },
            message: props => `${props.value} is not a valid maximum discount amount!`
        }
    },
    minPurchaseLimit: {
        type: Number,
        required: true, 
        min: 0
    },
    status: {
        type: String,
        enum: ['active', 'inactive'],
        default: 'active'
    }
}, { timestamps: true });

const Coupon = mongoose.model('Coupon', couponSchema);

module.exports = Coupon;

This is my cartSchema.js code:- 
const mongoose= require('mongoose');
const {Schema}= mongoose;


const cartSchema = new mongoose.Schema({
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: {  // Add this for variant reference
            type: Schema.Types.ObjectId,
            default: null
        },
        size: {  // Add this for size
            type: Number,
            required: true
        },
        color: {  // Add this for color
            type: String,
            required: true
        },
        quantity: {
            type: Number,
            default: 1
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        },
        status: {
            type: String,
            default: 'placed'
        },
        cancellationReason: {
            type: String,
            default: 'none'
        }
    }]
});
const Cart= mongoose.model('Cart',cartSchema)
module.exports= Cart


This is my orderSchema.js code:- 
const mongoose = require('mongoose');
const { Schema } = mongoose;

const orderSchema = new Schema({
    orderId: {
        type: String,
        unique: true,
        default: function() {
           
            const timestamp = Date.now().toString().slice(-10);
            const randomStr = Math.random().toString(36).substr(2, 6).toUpperCase();
            return `ORD-${timestamp}-${randomStr}`;
        }
    },
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: {
            type: Schema.Types.ObjectId,
            ref: 'Product'
        },
        color: {
            type: String,
            required: true
        },
        size: {
            type: Number,
            required: true
        },
        quantity: {
            type: Number,
            required: true
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        },
        status: {
            type: String,
            enum: ['placed', 'cancelled'],
            default: 'placed'
        }
    }],
    // Embedded shipping address details
    shippingAddress: {
        name: {
            type: String,
            required: true,
            trim: true
        },
        addressType: {
            type: String,
            enum: ['Home', 'Work', 'Other'],
            required: true
        },
        city: {
            type: String,
            required: true,
            trim: true
        },
        landmark: {
            type: String,
            required: true,
            trim: true
        },
        state: {
            type: String,
            required: true,
            trim: true
        },
        pincode: {
            type: String,
            required: true,
            match: [/^[0-9]{6}$/, 'Please enter a valid 6-digit pincode']
        },
        phone: {
            type: String,
            required: true,
            validate: {
                validator: function(v) {
                    return /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        },
        altPhone: {
            type: String,
            validate: {
                validator: function(v) {
                    return v === '' || /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        }
    },
    paymentMethod: {
        type: String,
        required: true,
        enum: ['COD', 'paypal']
    },
    subtotal: {
        type: Number,
        required: true
    },
    shippingCost: {
        type: Number,
        required: true
    },
    discountAmount: {
        type: Number,
        default: 0
    },
    total: {
        type: Number,
        required: true
    },
    couponApplied: {
        code: {
            type: String,
            default: null
        },
        discountPercentage: {
            type: Number,
            default: null
        },
        discountAmount: {
            type: Number,
            default: null
        }
    },
    
    paymentStatus: {
        type: String,
        enum: ['pending', 'paid', 'failed'],
        default: 'pending'
    },
    status: {
        type: String,
        required: true,
        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']
    }
}, { timestamps: true });

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;

This is my userCheckout.ejs page code:- 



<%- include("../../views/partials/user/header/") %>


<style>
/* Coupon Section Styles */
.coupon-section {
    position: relative;
    margin: 2rem 0;
}

/* Coupon Remove Button Alignment */
.coupon-action-wrapper {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 1rem;
}

#removeCouponBtn {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    margin-left: auto;
}

/* Coupon Card Styles */
.coupon-card {
    border: 1px solid #e1e1e1;
    border-radius: 8px;
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.coupon-card .card-body {
    padding: 1.25rem;
    display: flex;
    flex-direction: column;
    height: 100%;
}

/* Coupon Header Section */
.coupon-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.coupon-code {
    font-weight: 600;
    font-size: 1.1rem;
    color: #384aeb;
}

.discount-badge {
    background: rgba(56, 74, 235, 0.1);
    color: #384aeb;
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.875rem;
    font-weight: 500;
}

/* Product List Item Styles */
.product-list-item {
    display: flex;
    flex-direction: column;
    padding: 1rem 0;
    border-bottom: 1px solid #eee;
}

.product-info {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
}

.product-details {
    flex-grow: 1;
}

.product-pricing {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
}

/* Savings Display */
.savings-row {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-top: 0.5rem;
    padding: 0.25rem 0.5rem;
    background-color: rgba(40, 167, 69, 0.1);
    border-radius: 4px;
    width: fit-content;
    margin-left: auto;
}

.savings-amount {
    color: #28a745;
    font-size: 0.875rem;
    font-weight: 500;
}

/* Order Summary Section */
.order-summary {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin-top: 1.5rem;
}

.order-summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
}

.coupon-discount-row {
    color: #28a745;
    font-weight: 500;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .product-info {
        flex-direction: column;
    }
    
    .product-pricing {
        align-items: flex-start;
        margin-top: 1rem;
    }
    
    .savings-row {
        margin-left: 0;
    }
}
</style>

<style>
  .last {
    color: #384aeb;
    outline: #000;
  }

  .card {
    border: 1px solid #ddd;
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    margin-top: 20px;
  }

  .card-body {
    padding: 1.5rem;
  }

  .card-title {
    margin-bottom: 1rem;
    color: #333;
    font-weight: 600;
    font-size: 1.2rem;
  }

  .card-text {
    margin-bottom: 0.75rem;
    color: #666;
    line-height: 1.6;
  }

  .badge {
    padding: 0.5em 1em;
    font-size: 0.875em;
    border-radius: 20px;
    background-color: #384aeb;
    color: white;
    margin-bottom: 1rem;
  }

  .btn-outline-primary {
    color: #384aeb;
    border-color: #384aeb;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    border-radius: 5px;
    transition: all 0.3s;
  }

  .btn-outline-primary:hover {
    color: #fff;
    background-color: #384aeb;
    border-color: #384aeb;
  }

  #addressDetails {
    transition: all 0.3s ease;
  }

  .address-card {
    background: #fff;
    border: 1px solid #e8e8e8;
    padding: 20px;
    margin-top: 20px;
    border-radius: 10px;
  }

  .address-info {
    margin-bottom: 10px;
    font-size: 1rem;
  }

  .address-label {
    font-weight: 600;
    color: #444;
    margin-right: 8px;
  }

  .add-address-btn {
    color: #000 !important;
    text-decoration: none !important;
    font-weight: 500;
    outline-width: 32;
  }

  select.form-control {
    height: 50px;
    border-radius: 8px;
    border: 1px solid #ddd;
    padding: 0 15px;
    font-size: 1rem;
  }

  .address-details-card {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 20px;
    margin-top: 15px;
  }

  .contact-info {
    display: flex;
    gap: 20px;
    margin-bottom: 15px;
  }

  .divider {
    height: 1px;
    background: #e0e0e0;
    margin: 15px 0;
  }
</style>

<!-- Start Banner Area -->
<section class="banner-area organic-breadcrumb">
  <div class="container">
    <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
      <div class="col-first">
        <h1>Checkout</h1>
        <nav class="d-flex align-items-center">
          <a href="/">Home<span class="lnr lnr-arrow-right"></span></a>
          <a href="#">Checkout</a>
        </nav>
      </div>
    </div>
  </div>
</section>
<!-- End Banner Area -->

<!--================Checkout Area =================-->
<section class="checkout_area section_gap">
  <div class="container">
    <div class="billing_details">
      <div class="row">
        <div class="col-lg-8">
          <div class="coupon_section mt-4 mb-4">
            <h3>Available Coupons</h3>
            
            <div class="row" id="availableCouponsContainer">
              <!-- Coupons will be dynamically populated here -->
               
            </div>
            
          
            <div id="couponMessage" class="text-danger mt-2"></div>
          </div>

          <div class="coupon-action-wrapper">
            <button type="button" class="btn btn-sm btn-outline-danger" id="removeCouponBtn" style="display: none;">
                Remove Coupon
            </button>
        </div>

          <h3>Shipping Address</h3>
          <!-- Address Selection -->
          <div class="mb-4">
            <select class="form-control" id="addressSelect" onchange="displayAddressDetails(this.value)">
              <option value="">Select an existing address</option>
              <% addresses.forEach(function(address) { %>
              <option value="<%= address._id %>">
                <%= address.name %> - <%= address.landmark %>, <%= address.city %>
              </option>
              <% }); %>
            </select>

            <!-- Enhanced Address Details Display -->
            <div id="addressDetails" class="mt-3" style="display: none;">
              <div class="address-details-card">
                <div class="d-flex justify-content-between align-items-start">
                  <div class="flex-grow-1">
                    <span class="badge" id="addressType"></span>
                    <h5 class="card-title mb-3" id="addressName"></h5>

                    <div class="contact-info">
                      <div>
                        <span class="address-label">Phone:</span>
                        <span id="addressPhone"></span>
                      </div>
                      <div>
                        <span class="address-label">Alt Phone:</span>
                        <span id="addressAltPhone"></span>
                      </div>
                    </div>

                    <div class="divider"></div>

                    <div class="address-info">
                      <span class="address-label">Landmark:</span>
                      <span id="addressLandmark"></span>
                    </div>

                    <div class="address-info">
                      <span class="address-label">City:</span>
                      <span id="addressCity"></span>
                    </div>

                    <div class="address-info">
                      <span class="address-label">State:</span>
                      <span id="addressState"></span>
                    </div>

                    <div class="address-info">
                      <span class="address-label">Pincode:</span>
                      <span id="addressPincode"></span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Add New Address Button -->
          <div class="mb-4">
            <button type="button" class="primary-btn">
              <a href="/profile/add-address" class="add-address-btn">Add New Address</a>
            </button>
          </div>
        </div>

        <div class="col-lg-4">
          <div class="order_box">
            <h2>Your Order</h2>
            <ul class="list">
              <li><a href="#">Product <span>Total</span></a></li>
              <% cartItems.forEach(function(item) { %>
                <li data-product-id="<%= item.productId._id %>" class="product-list-item">
                  <div class="product-info">
                      <% if (item.variantImage) { %>
                      <img src="/uploads/product-images/<%= item.variantImage %>" alt="<%= item.productName %>"
                          style="width: 50px; height: 50px; object-fit: cover;">
                      <% } %>
                      <div class="product-details">
                          <span><%= item.productName %></span>
                          <small>(Color: <%= item.variantColor %>, Size: <%= item.variantSize %>)</small>
                          <span class="quantity">Qty: <%= item.quantity %></span>
                      </div>
                      <div class="product-pricing">
                          <span class="price">₹<%= (item.price * item.quantity).toFixed(2) %></span>
                          <div class="savings-row" style="display: none;">
                              <span class="savings-amount"></span>
                          </div>
                      </div>
                  </div>
              </li>
                <% }); %>
            </ul>

            

            <ul class="list list_2">
              <li><a href="#">Subtotal <span id="subtotalDisplay">₹<%= subtotal.toFixed(2) %></span></a></li>
              <li id="couponDiscountRow" style="display: none;">
                <a href="#">Coupon Discount <span id="couponDiscountDisplay">-₹0.00</span></a>
              </li>

              <li><a href="#">Shipping <span>₹<%= shippingCost.toFixed(2) %></span></a></li>
              <li><a href="#">Total <span id="totalDisplay">₹<%= total.toFixed(2) %></span></a></li>
            </ul>

            <!-- Payment Options -->
            <div class="payment_item">
              <div class="radion_btn">
                <input type="radio" id="cod" name="payment_method" value="COD">
                <label for="cod">Cash on Delivery</label>
                <div class="check"></div>
              </div>
              <p>Pay when you receive your order.</p>
            </div>
            <div class="payment_item">
              <div class="radion_btn">
                <input type="radio" id="paypal" name="payment_method" value="paypal">
                <label for="paypal">RazorPay</label>
                <div class="check"></div>
              </div>
              <p>Pay via RazorPay; you can pay with your credit card if you don't have a Razorpay account.</p>
            </div>

            <div class="creat_account">
              <input type="checkbox" id="terms" name="selector">
              <label for="terms">I've read and accept the </label>
              <a href="#">terms & conditions*</a>
            </div>
            <button type="button" class="primary-btn" onclick="placeOrder()">Place Order</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!--================End Checkout Area =================-->


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.theme.default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  
  // Global variables to manage coupon state
  let selectedCoupon = null;
let subtotal = "<%= subtotal %>";
let originalTotal = "<%= total %>";
const originalPrices = new Map();

// Fetch and display available coupons
async function fetchAvailableCoupons() {
    const availableCouponsContainer = document.getElementById('availableCouponsContainer');
    
    try {
        const response = await fetch(`/checkout/available-coupons?subtotal=${subtotal}`);
        const data = await response.json();

        availableCouponsContainer.innerHTML = '';

        if (data.success && data.coupons.length > 0) {
            const couponWrapper = document.createElement('div');
            couponWrapper.className = data.coupons.length > 3 ? 'coupon-carousel owl-carousel owl-theme' : 'row';

            data.coupons.forEach(coupon => {
                const couponColumn = document.createElement('div');
                couponColumn.className = data.coupons.length > 3 ? 'item' : 'col-md-4 mb-3';

                couponColumn.innerHTML = `
                    <div class="card coupon-card" data-coupon-code="${coupon.code}">
                        <div class="card-body">
                            <div class="coupon-header">
                                <span class="coupon-code">${coupon.code}</span>
                                <span class="discount-badge">${coupon.discountPercentage}% OFF</span>
                            </div>
                            <p class="card-text">${coupon.title}</p>
                            <div class="coupon-details">
                                <p class="mb-1 text-muted">${coupon.description}</p>
                                <p class="mb-1 text-muted">Min. Purchase: ₹${coupon.minPurchaseLimit}</p>
                                <p class="mb-1 text-muted">Max. Discount: ₹${coupon.maxDiscountAmount || 'No limit'}</p>
                                <p class="mb-0 text-muted">Valid till: ${new Date(coupon.expiryDate).toLocaleDateString()}</p>
                            </div>
                            <button class="btn btn-outline-primary apply-coupon-btn mt-3" 
                                    onclick="selectCoupon('${coupon.code}')">
                                Apply Coupon
                            </button>
                        </div>
                    </div>
                `;

                couponWrapper.appendChild(couponColumn);
            });

            availableCouponsContainer.appendChild(couponWrapper);

            if (data.coupons.length > 3) {
                $(couponWrapper).owlCarousel({
                    loop: false,
                    margin: 15,
                    nav: true,
                    responsive: {
                        0: { items: 1 },
                        600: { items: 2 },
                        1000: { items: 3 }
                    }
                });
            }
        } else {
            availableCouponsContainer.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info">No coupons available</div>
                </div>
            `;
        }
    } catch (error) {
        console.error('Error fetching coupons:', error);
        availableCouponsContainer.innerHTML = `
            <div class="col-12">
                <div class="alert alert-danger">Failed to load coupons</div>
            </div>
        `;
    }
}
    
    // Select and validate coupon
    async function selectCoupon(couponCode) {
    try {
        if (selectedCoupon) {
            await removeCoupon();
        }

        const response = await axios.post('/checkout/validate-coupon', {
            couponCode,
            subtotal: parseFloat(subtotal)
        });

        if (response.data.success) {
            const { data } = response;
            selectedCoupon = {
                code: data.coupon.code,
                discountAmount: data.coupon.discountAmount
            };

            // Update UI with discount information
            updateCouponUI(data.coupon);
            
            // Update product prices with discounts
            updateProductPricing(data.coupon.productDiscounts);

            // Show success message
            await Swal.fire({
                icon: 'success',
                title: 'Coupon Applied!',
                text: `Discount of ₹${data.coupon.discountAmount.toFixed(2)} applied successfully`,
                timer: 2000
            });
        }
    } catch (error) {
        console.error('Error applying coupon:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.response?.data?.message || 'Failed to apply coupon',
            timer: 3000
        });
    }
}
  
  
// Function to update UI after coupon application
function updateCouponUI(couponData) {
    const couponDiscountRow = document.getElementById('couponDiscountRow');
    const couponDiscountDisplay = document.getElementById('couponDiscountDisplay');
    const totalDisplay = document.getElementById('totalDisplay');
    const removeCouponBtn = document.getElementById('removeCouponBtn');

    // Update discount display
    couponDiscountRow.style.display = 'block';
    couponDiscountDisplay.textContent = `-₹${couponData.discountAmount.toFixed(2)}`;

    // Update total amount
    const newTotal = parseFloat(subtotal) - couponData.discountAmount;
    totalDisplay.textContent = `₹${newTotal.toFixed(2)}`;

    // Show remove coupon button
    removeCouponBtn.style.display = 'block';

    // Update coupon cards
    const couponCards = document.querySelectorAll('.coupon-card');
    couponCards.forEach(card => {
        const isSelected = card.dataset.couponCode === couponData.code;
        const applyBtn = card.querySelector('.apply-coupon-btn');
        
        if (isSelected) {
            card.classList.add('border-success');
            applyBtn.textContent = 'Applied';
            applyBtn.disabled = true;
        } else {
            card.classList.remove('border-success');
            applyBtn.disabled = true;
        }
    });
}


    
function updateProductPricing(productDiscounts) {
    const productItems = document.querySelectorAll('.product-list-item');
    
    productItems.forEach(item => {
        const productId = item.getAttribute('data-product-id');
        const discountInfo = productDiscounts.find(d => d.productId === productId);
        
        if (discountInfo) {
            const priceElement = item.querySelector('.price');
            const savingsRow = item.querySelector('.savings-row');
            const savingsAmount = item.querySelector('.savings-amount');

            // Store original price if not stored
            if (!originalPrices.has(productId)) {
                originalPrices.set(productId, parseFloat(priceElement.textContent.replace('₹', '')));
            }

            // Update price display
            priceElement.textContent = `₹${discountInfo.finalPrice.toFixed(2)}`;
            savingsAmount.textContent = `You save: ₹${discountInfo.discountAmount.toFixed(2)}`;
            savingsRow.style.display = 'flex';
        }
    });
}


function createSaveAmountSpan(item) {
    const saveSpan = document.createElement('span');
    saveSpan.className = 'save-amount text-success d-block mt-1';
    item.querySelector('.last').appendChild(saveSpan);
    return saveSpan;
}


    
    // Remove applied coupon
    async function removeCoupon() {
    if (!selectedCoupon) return;

    // Reset UI elements
    document.getElementById('couponDiscountRow').style.display = 'none';
    document.getElementById('couponDiscountDisplay').textContent = '-₹0.00';
    document.getElementById('totalDisplay').textContent = `₹${originalTotal}`;
    document.getElementById('removeCouponBtn').style.display = 'none';

    // Reset product prices
    const productItems = document.querySelectorAll('.product-list-item');
    productItems.forEach(item => {
        const productId = item.getAttribute('data-product-id');
        const originalPrice = originalPrices.get(productId);
        
        if (originalPrice) {
            const priceElement = item.querySelector('.price');
            const savingsRow = item.querySelector('.savings-row');
            
            priceElement.textContent = `₹${originalPrice.toFixed(2)}`;
            savingsRow.style.display = 'none';
        }
    });

    // Reset coupon cards
    const couponCards = document.querySelectorAll('.coupon-card');
    couponCards.forEach(card => {
        card.classList.remove('border-success');
        const applyBtn = card.querySelector('.apply-coupon-btn');
        applyBtn.disabled = false;
        applyBtn.textContent = 'Apply Coupon';
    });

    selectedCoupon = null;
    originalPrices.clear();
}
    
    // Initialize page
    document.addEventListener('DOMContentLoaded', () => {
    fetchAvailableCoupons();
    
    const removeCouponBtn = document.getElementById('removeCouponBtn');
    if (removeCouponBtn) {
        removeCouponBtn.style.display = 'none';
    }
});



    
  
  // Address display function
  async function displayAddressDetails(addressId) {
      const addressDetails = document.getElementById('addressDetails');
      if (!addressId) {
          addressDetails.style.display = 'none';
          return;
      }
  
      try {
          const response = await fetch(`/profile/get-address/${addressId}`);
          const data = await response.json();
  
          if (data.success) {
              const address = data.address;
              
              // Update all address fields
              document.getElementById('addressType').textContent = address.addressType;
              document.getElementById('addressName').textContent = address.name;
              document.getElementById('addressPhone').textContent = address.phone;
              document.getElementById('addressAltPhone').textContent = address.altPhone || 'Not provided';
              document.getElementById('addressLandmark').textContent = address.landmark;
              document.getElementById('addressCity').textContent = address.city;
              document.getElementById('addressState').textContent = address.state;
              document.getElementById('addressPincode').textContent = address.pincode;
  
              addressDetails.style.display = 'block';
          } else {
              console.error('Error fetching address details');
              addressDetails.style.display = 'none';
          }
      } catch (error) {
          console.error('Error:', error);
          addressDetails.style.display = 'none';
      }
  }
  
  // Place order function
  async function placeOrder() {
      if (!document.getElementById('terms').checked) {
          Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Please accept the terms and conditions',
          });
          return;
      }
  
      const addressId = document.getElementById('addressSelect').value;
      if (!addressId) {
          Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Please select a delivery address',
          });
          return;
      }
  
      const paymentMethod = document.querySelector('input[name="payment_method"]:checked')?.value;
      if (!paymentMethod) {
          Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Please select a payment method',
          });
          return;
      }
  
      try {
          // Show loading state
          Swal.fire({
              title: 'Processing Order',
              text: 'Please wait...',
              allowOutsideClick: false,
              didOpen: () => {
                  Swal.showLoading();
              }
          });
  
          // Prepare order data
          const orderData = {
              addressId,
              paymentMethod,
          };
  
          // Add coupon details if applied
          if (selectedCoupon) {
              orderData.couponCode = selectedCoupon.code;
          }
  
          const response = await fetch('/checkout/place-order', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify(orderData),
          });
  
          const data = await response.json();
          
          if (data.success) {
              if (paymentMethod === 'COD') {
                  Swal.fire({
                      icon: 'success',
                      title: 'Order Placed Successfully!',
                      text: 'Redirecting to order summary...',
                      timer: 2000,
                      showConfirmButton: false
                  }).then(() => {
                      window.location.href = `/orders/${data.orderId}`;
                  });
              } else {
                  // Handle PayPal/RazorPay payment
                  window.location.href = `/checkout/process-payment/${data.orderId}`;
              }
          } else {
              throw new Error(data.message || 'Failed to place order');
          }
      } catch (error) {
          console.error('Error:', error);
          Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: error.message || 'An unexpected error occurred. Please try again later.',
          });
      }
  }
  
  // Initialize page
  document.addEventListener('DOMContentLoaded', () => {
      // Fetch available coupons
      fetchAvailableCoupons();
  
      // Add event listener for coupon removal
      const removeCouponBtn = document.getElementById('removeCouponBtn');
      if (removeCouponBtn) {
          removeCouponBtn.addEventListener('click', removeCoupon);
      }
  });
  </script>

<%- include("../../views/partials/user/footer/") %>


This is my checkoutController.js code:- 
const Address = require('../../models/addressSchema');
const Order = require('../../models/orderSchema');
const Cart = require('../../models/cartSchema');
const Product = require('../../models/productSchema');
const mongoose = require('mongoose');
const Coupon = require('../../models/couponSchema');


const getCheckoutPage = async (req, res) => {
    try {
        // Fetch user's addresses
        const userAddress = await Address.findOne({ userId: req.user._id });
        const addresses = userAddress ? userAddress.address : [];

        // Get cart items from database with full product details
        const cart = await Cart.findOne({ userId: req.user._id })
            .populate({
                path: 'items.productId',
                model: 'Product',
                populate: {
                    path: 'variants',
                    model: 'Product'
                }
            });

        const cartItems = cart ? cart.items.map(item => {
            // Find the specific variant for the cart item
            const product = item.productId;
            const variant = product.variants.find(v => 
                v._id.toString() === item.variantId.toString()
            );

            return {
                ...item.toObject(),
                productName: product.productName,
                variantColor: item.color,
                variantSize: item.size,
                variantImage: variant ? 
                    (variant.images.find(img => img.mainImage) || variant.images[0])?.filename 
                    : null,
                variantDetails: variant ? {
                    color: variant.color,
                    images: variant.images,
                    mainImage: variant.images.find(img => img.mainImage) || variant.images[0]
                } : null
            };
        }) : [];

        // Calculate totals
        const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        const shippingCost = 0; // Free shipping
        const total = subtotal + shippingCost;

        res.render('userCheckout', {
            addresses,
            cartItems,
            subtotal,
            shippingCost,
            total,
            user: req.user
        });
    } catch (error) {
        console.error('Error loading checkout page:', error);
        res.status(500).render('page-404', { 
            message: 'Error loading checkout page',
            error: error.message 
        });
    }
};





const updateProductVariantQuantities = async (order, isCancel = false) => {
    try {
        for (const item of order.items) {
            const product = await Product.findById(item.productId);
            if (!product) continue;

            const variant = product.variants.id(item.variantId);
            if (!variant) continue;

            // Find the specific size in the variant
            const sizeVariant = variant.sizes.find(s => s.size === item.size);
            if (!sizeVariant) continue;

            // Adjust quantity based on order or cancellation
            const quantityChange = isCancel ? item.quantity : -item.quantity;
            sizeVariant.quantity += quantityChange;

            await product.save();
        }
    } catch (error) {
        console.error('Error updating product variant quantities:', error);
        res.redirect('/admin/pageNotFound')
    }
};


const createOrder = async (req, res) => {
    try {
        const { addressId, paymentMethod } = req.body;

        // Validate address
        const userAddress = await Address.findOne({ userId: req.user._id });
        const selectedAddress = userAddress.address.find(addr => addr._id.toString() === addressId);

        if (!selectedAddress) {
            return res.status(400).json({
                success: false,
                message: 'Invalid address selected'
            });
        }

        // Get cart items with full product details
        const cart = await Cart.findOne({ userId: req.user._id })
            .populate({
                path: 'items.productId',
                model: 'Product',
                populate: {
                    path: 'variants',
                    model: 'Product'
                }
            });

        if (!cart || !cart.items.length) {
            return res.status(400).json({
                success: false,
                message: 'Cart is empty'
            });
        }

        // Calculate totals
        const subtotal = cart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        const shippingCost = 0;
        const total = subtotal + shippingCost;

        // Create new order with detailed item information
        const newOrder = new Order({
            userId: req.user._id,
            items: cart.items.map(item => ({
                productId: item.productId._id,
                quantity: item.quantity,
                price: item.price,
                totalPrice: item.price * item.quantity,
                color: item.color,
                size: item.size,
                variantId: item.variantId
            })),
            shippingAddress: {
                name: selectedAddress.name,
                addressType: selectedAddress.addressType,
                city: selectedAddress.city,
                landmark: selectedAddress.landmark,
                state: selectedAddress.state,
                pincode: selectedAddress.pincode,
                phone: selectedAddress.phone,
                altPhone: selectedAddress.altPhone || ''
            },
            paymentMethod,
            subtotal,
            shippingCost,
            total,
            status: paymentMethod === 'COD' ? 'pending' : 'processing',
            paymentStatus: 'pending'
        });

        await newOrder.save();
        await updateProductVariantQuantities(newOrder);

        // Clear cart after order creation
        await Cart.deleteOne({ userId: req.user._id });

        res.status(200).json({
            success: true,
            message: 'Order placed successfully',
            orderId: newOrder._id
        });
    } catch (error) {
        console.error('Error creating order:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating order',
            error: error.message
        });
    }
};



const getOrderSummary = async (req, res) => {
    try {
        const { orderId } = req.params;

        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).render('page-404', { message: 'Invalid order ID format' });
        }

        const order = await Order.findById(orderId)
            .populate({
                path: 'items.productId',
                populate: {
                    path: 'variants',
                    model: 'Product'
                }
            });

        if (!order) {
            return res.status(404).render('page-404', { message: 'Order not found' });
        }

        // Prepare items with variant images
        const orderItems = order.items.map(item => {
            const product = item.productId;
            const variant = product.variants.find(v => 
                v._id.toString() === item.variantId.toString()
            );

            return {
                ...item.toObject(),
                product: {
                    ...product.toObject(),
                    productImages: variant ? 
                        variant.images.map(img => img.filename) 
                        : [],
                    variantImages: variant ? 
                        variant.images.map(img => img.filename) 
                        : [],
                    variantImage: variant ? 
                        (variant.images.find(img => img.mainImage) || variant.images[0])?.filename 
                        : null,
                    color: item.color,
                    size: item.size
                }
            };
        });

        res.render('userOrderSummary', {
            order,
            orderItems,
            user: req.user
        });
    } catch (error) {
        console.error('Error loading order summary:', error);
        res.status(500).render('page-404', { message: 'Error loading order summary' });
    }
};


const validateCoupon = async (req, res) => {
    try {
        const { couponCode, subtotal } = req.body;

        if (!couponCode || !subtotal) {
            return res.status(400).json({
                success: false,
                message: 'Coupon code and subtotal are required'
            });
        }

        const coupon = await Coupon.findOne({ 
            code: couponCode.toUpperCase() 
        });

        if (!coupon) {
            return res.status(400).json({
                success: false,
                message: 'Invalid coupon code'
            });
        }

        const now = new Date();
        if (
            coupon.status !== 'active' ||
            now < coupon.validFrom ||
            now > coupon.expiryDate
        ) {
            return res.status(400).json({
                success: false,
                message: 'Coupon is expired or inactive'
            });
        }

        const subtotalNumber = parseFloat(subtotal);
        if (subtotalNumber < coupon.minPurchaseLimit) {
            return res.status(400).json({
                success: false,
                message: `Minimum purchase of ₹${coupon.minPurchaseLimit} required to use this coupon`
            });
        }

        // Calculate percentage-based discount
        const percentageDiscount = Math.floor(subtotal * (coupon.discountPercentage / 100));
        
        // Determine final discount amount considering maximum limit
        const finalDiscountAmount = coupon.maxDiscountAmount 
            ? Math.min(percentageDiscount, coupon.maxDiscountAmount)
            : percentageDiscount;

        // Calculate discount ratio for proportional distribution
        const discountRatio = finalDiscountAmount / subtotalNumber;

        const cart = await Cart.findOne({ userId: req.user._id })
            .populate({
                path: 'items.productId',
                model: 'Product'
            });

        const productDiscounts = cart.items.map(item => {
            const itemTotal = item.price * item.quantity;
            const itemDiscount = Math.floor(itemTotal * discountRatio);

            return {
                productId: item.productId._id,
                productName: item.productId.productName,
                originalPrice: itemTotal,
                discountAmount: itemDiscount,
                finalPrice: itemTotal - itemDiscount
            };
        });

        const maxDiscountReached = finalDiscountAmount === coupon.maxDiscountAmount;

        return res.status(200).json({
            success: true,
            message: 'Coupon applied successfully',
            coupon: {
                code: coupon.code,
                discountPercentage: coupon.discountPercentage,
                discountAmount: finalDiscountAmount,
                maxDiscountAmount: coupon.maxDiscountAmount,
                maxDiscountReached,
                minPurchaseLimit: coupon.minPurchaseLimit,
                productDiscounts: productDiscounts
            }
        });
    } catch (error) {
        console.error('Coupon validation error:', error);
        res.status(500).json({
            success: false,
            message: 'Error validating coupon',
            error: error.message
        });
    }
};

const getAvailableCoupons = async (req, res) => {
    try {
        const subtotal = req.query.subtotal ? parseFloat(req.query.subtotal) : 0;
        const now = new Date();

        const coupons = await Coupon.find({
            status: 'active',
            validFrom: { $lte: now },
            expiryDate: { $gte: now },
            minPurchaseLimit: { $lte: subtotal }
        }).sort({ discountPercentage: -1 });

        const formattedCoupons = coupons.map(coupon => {
            // Calculate potential discount based on current subtotal
            const percentageDiscount = subtotal * (coupon.discountPercentage / 100);
            const maxPossibleDiscount = coupon.maxDiscountAmount 
                ? Math.min(percentageDiscount, coupon.maxDiscountAmount)
                : percentageDiscount;

            return {
                id: coupon._id,
                code: coupon.code,
                title: coupon.title,
                description: coupon.description,
                discountPercentage: coupon.discountPercentage,
                minPurchaseLimit: coupon.minPurchaseLimit,
                maxDiscountAmount: coupon.maxDiscountAmount,
                potentialDiscount: Math.floor(maxPossibleDiscount),
                validFrom: coupon.validFrom,
                expiryDate: coupon.expiryDate
            };
        });

        res.status(200).json({
            success: true,
            coupons: formattedCoupons
        });
    } catch (error) {
        console.error('Error fetching available coupons:', error);
        res.status(500).json({
            success: false,
            message: 'Error fetching coupons'
        });
    }
};
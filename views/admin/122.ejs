


This is my productSchema.js code:-
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    salesPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });



const Product = mongoose.model("Product", productSchema);

module.exports = Product;



This is my orderSchema.js code:- 
const mongoose = require('mongoose');
const { Schema } = mongoose;
const { v4: uuidv4 } = require('uuid');

const orderSchema = new Schema({
    orderId: {
        type: String,
        default: () => uuidv4(),
        unique: true
    },
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: {
            type: Schema.Types.ObjectId,
            ref: 'Product'
        },
        color: {
            type: String,
            required: true
        },
        size: {
            type: Number,
            required: true
        },
        quantity: {
            type: Number,
            required: true
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        },
        status: {
            type: String,
            enum: ['placed', 'cancelled'],
            default: 'placed'
        }
    }],
    shippingAddress: {
        type: Schema.Types.Mixed,
        required: true
    },
    paymentMethod: {
        type: String,
        required: true,
        enum: ['COD', 'paypal']
    },
    subtotal: {
        type: Number,
        required: true
    },
    shippingCost: {
        type: Number,
        required: true
    },
    total: {
        type: Number,
        required: true
    },
    paymentStatus: {
        type: String,
        enum: ['pending', 'paid', 'failed'],
        default: 'pending'
    },
    status: {
        type: String,
        required: true,
        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']
    }
}, { timestamps: true });

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;




This is my categorySchema.js code:- 

const mongoose= require('mongoose');
const {Schema}= mongoose;

const categorySchema= new mongoose.Schema({
    name:{
    type: String,
    required:true,
    unique:true
    },
    description: {
        type:String,
        required:true
    },
    isListed: {
        type:Boolean,
        default:true
    },
    categoryOffer:{
        type:Number,
        default:0
    },
    createdAt: {
        type: Date,
        default:Date.now
    },
})

const Category= mongoose.model('Category',categorySchema);

module.exports= Category


This is my addressSchema.js code:- 
const mongoose = require("mongoose");
const { Schema } = mongoose;

const addressSchema = new Schema({
    userId: {
        type: Schema.Types.ObjectId,
        ref: "User",
        required: true
    },
    address: [{
        addressType: {
            type: String,
            required: true,
            enum: ['Home', 'Work', 'Other']
        },
        name: {
            type: String,
            required: [true, 'Name is required'],
            trim: true
        },
        city: { 
            type: String,
            required: [true, 'City is required'],
            trim: true
        },
        landmark: {
            type: String,
            required: [true, 'Landmark is required'],
            trim: true
        },
        state: {
            type: String,
            required: [true, 'State is required'],
            trim: true
        },
        pincode: {
            type: String,
            required: [true, 'Pincode is required'],
            match: [/^[0-9]{6}$/, 'Please enter a valid 6-digit pincode']
        },
        phone: {
            type: String,
            required: [true, 'Phone number is required'],
            validate: {
                validator: function(v) {
                    return /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        },
        altPhone: {
            type: String,
            validate: {
                validator: function(v) {
                    return v === '' || /^[1-9][0-9]{9}$/.test(v);
                },
                message: props => `${props.value} is not a valid phone number!`
            }
        }
    }]
});

const Address = mongoose.model("Address", addressSchema);

module.exports = Address;



This is my userSchema.js code :- 




const mongoose= require("mongoose");
const {Schema}= mongoose;

const userSchema= new Schema ({
    name:{
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true,
        unique:true
    },
    phone: {
        type:String,
        required: false,
        unique: true,
        sparse:true,
        default:undefined
    },
    googleId:{
        type:String,
        unique:true,
        sparse:true
    },
    password: {
        type:String,
        required: false
    },
    isBlocked: {
        type: Boolean,
        default:false
    },
    isAdmin: {
        type: Boolean,
        default: false
    },
    cart: [{
        type: Schema.Types.ObjectId,
        ref: 'Cart'
    }],
    
    wallet: {
        type: Number,
        default:0,
    },
    wishlist: [{
        type: Schema.Types.ObjectId,
        ref: "wishlist"
    }],
    orderHistory: [{
        type: Schema.Types.ObjectId,
        ref: "Order"
    }],
    createdOn : {
        type:Date,
        default:Date.now,
    },
    referralCode: {
        type: String,
        // required:true
    },
    redeemed: {
        type: Boolean,
        // defaulte:false
 
    },
    redeemedUsers: [{
        type: Schema.Types.ObjectId,
        ref: "User",
        // required:true
    }],
    searchHistory: [{
        category: {
            type: Schema.Types.ObjectId,
            ref: "Category"
        },
        Brand: {
            type: String,

        },
        searchOn: {
            type: Date,
            default: Date.now
        }
    }]
},{timestamps:true})





const user= mongoose.model("User",userSchema);


module.exports= user


This is my userRouter.js code:- 
router.get('/change-password', userAuth, userProfileController.getChangePasswordPage);
router.post('/change-password', userAuth, userProfileController.changePassword);

This is my userProfileController.js code:- 
const getChangePasswordPage = async (req, res) => {
    try {
        // Render the profile page with the change password section active
        res.render('userProfile', { 
            user: req.user, 
            activeSection: 'forgot-password' // This matches the condition in your EJS template
        });
    } catch (error) {
        console.error('Error loading change password page:', error);
        res.status(500).render('error', {
            message: 'Error loading change password page'
        });
    }
};



const changePassword = async (req, res) => {
    try {
        const { currentPassword, newPassword, confirmPassword } = req.body;

        // Validate passwords
        if (!currentPassword || !newPassword || !confirmPassword) {
            return res.status(400).json({
                success: false,
                message: 'All fields are required'
            });
        }

        if (newPassword !== confirmPassword) {
            return res.status(400).json({
                success: false,
                message: 'New passwords do not match'
            });
        }

        // Get user and verify current password
        const user = await User.findById(req.user._id);
        
        // Add a check in case user is not found
        if (!user) {
            return res.status(404).json({
                success: false,
                message: 'User not found'
            });
        }

        // Check if the user has a password (for social login users)
        if (!user.password) {
            return res.status(400).json({
                success: false,
                message: 'You cannot change password for this account'
            });
        }

        const isMatch = await bcrypt.compare(currentPassword, user.password);

        if (!isMatch) {
            return res.status(400).json({
                success: false,
                message: 'Current password is incorrect'
            });
        }

        // Hash new password and update
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        user.password = hashedPassword;
        await user.save();

        res.status(200).json({
            success: true,
            message: 'Password changed successfully'
        });
    } catch (error) {
        console.error('Error changing password:', error);
        res.status(500).json({
            success: false,
            message: 'Error changing password',
            error: error.message
        });
    }
};





This is my userProfile.ejs page code:- 

  <!-- Profile Section -->
<% if (activeSection === 'profile') { %>
    <div class="profile-section">
        <h2>Profile Dashboard</h2>
        <div class="profile-info">
            <div class="info-group">
                <label>Name:</label>
                <span><%= user.name %></span>
            </div>
            <div class="info-group">
                <label>Email:</label>
                <span><%= user.email %></span>
            </div>
            <div class="info-group">
                <label>Phone:</label>
                <span><%= user.phone || 'Not provided' %></span>
            </div>
            <div class="info-group">
                <label>Member Since:</label>
                <span><%= new Date(user.createdOn).toLocaleDateString() %></span>
            </div>
        </div>
        <div class="profile-actions">
            <button onclick="window.location.href='/edit-profile'" class="btn btn-primary">
                Edit Profile
            </button>
            <button onclick="window.location.href='/change-password'" class="btn btn-secondary">
                Change Password
            </button>
        </div>
    </div>
    <% } %>

<!-- Change Password Section -->
<% if (activeSection === 'forgot-password') { %>
    <div class="change-password-section">
        <h2>Change Password</h2>
        <form id="changePasswordForm" class="password-form">
            <div class="form-group position-relative">
                <label for="currentPassword">Current Password</label>
                <div class="input-group">
                    <input type="password" id="currentPassword" name="currentPassword" class="form-control" required>
                    <span class="input-group-text toggle-password" data-target="currentPassword">
                        <i class="fas fa-eye-slash"></i>
                    </span>
                </div>
            </div>
            <div class="form-group position-relative">
                <label for="newPassword">New Password</label>
                <div class="input-group">
                    <input type="password" id="newPassword" name="newPassword" class="form-control" required>
                    <span class="input-group-text toggle-password" data-target="newPassword">
                        <i class="fas fa-eye-slash"></i>
                    </span>
                </div>
            </div>
            <div class="form-group position-relative">
                <label for="confirmPassword">Confirm New Password</label>
                <div class="input-group">
                    <input type="password" id="confirmPassword" name="confirmPassword" class="form-control" required>
                    <span class="input-group-text toggle-password" data-target="confirmPassword">
                        <i class="fas fa-eye-slash"></i>
                    </span>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Change Password</button>
        </form>
    </div>
<% } %>


<script>
    
    
    // Wait for the DOM content to be loaded
    document.addEventListener('DOMContentLoaded', () => {
    const addAddressForm = document.querySelector('.address-form');
    
    if (addAddressForm) {
        addAddressForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            // Create FormData object
            const formData = new FormData(addAddressForm);
            const data = Object.fromEntries(formData);

            try {
                const response = await fetch('/profile/add-address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address added successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = '/profile/addresses';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: result.message || 'Failed to add address'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Something went wrong while adding the address'
                });
            }
        });
    }
});




   // Updated delete address functionality with SweetAlert2
document.addEventListener('DOMContentLoaded', function () {
    const deleteButtons = document.querySelectorAll('.delete-address-btn');

    deleteButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            const addressId = this.getAttribute('data-id');
            
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Send delete request
                    fetch(`/profile/delete-address/${addressId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Remove the address card from UI
                            this.closest('.address-card').remove();
                            
                            Swal.fire(
                                'Deleted!',
                                'Your address has been deleted.',
                                'success'
                            );
                        } else {
                            Swal.fire(
                                'Error!',
                                data.message || 'Failed to delete address',
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'Something went wrong while deleting the address.',
                            'error'
                        );
                    });
                }
            });
        });
    });
});

    



/// Function to handle edit button click
async function handleEditAddress(addressId) {
    try {
        if (!addressId) {
            throw new Error('Invalid address ID');
        }

        const addressCard = document.querySelector(`.address-card[data-id="${addressId}"]`);
        if (!addressCard) {
            throw new Error('Address card not found');
        }

        const response = await fetch(`/profile/get-address/${addressId}`, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin'
        });

        if (!response.ok) {
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Error fetching address');
            } else {
                throw new Error('Server returned an invalid response');
            }
        }

        const data = await response.json();
        
        if (!data.success || !data.address) {
            throw new Error(data.message || 'Address data not found');
        }

        // Populate the edit form with address data
        const address = data.address;
        document.getElementById('edit-name').value = address.name || '';
        document.getElementById('edit-phone').value = address.phone || '';
        document.getElementById('edit-alt-phone').value = address.altPhone || '';
        document.getElementById('edit-landmark').value = address.landmark || '';
        document.getElementById('edit-city').value = address.city || '';
        document.getElementById('edit-state').value = address.state || '';
        document.getElementById('edit-pincode').value = address.pincode || '';
        
        // Set address type radio button - Note the capitalized value
        const addressTypeRadio = document.querySelector(`input[name="edit-addressType"][value="${address.addressType}"]`);
        if (addressTypeRadio) {
            addressTypeRadio.checked = true;
        }

        // Store addressId for update
        document.getElementById('edit-form').setAttribute('data-address-id', addressId);
        
        // Show modal using Bootstrap 5
        const editModal = new bootstrap.Modal(document.getElementById('editAddressModal'));
        editModal.show();

    } catch (error) {
        console.error('Error in handleEditAddress:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to fetch address details',
            confirmButtonColor: '#3085d6'
        });
    }
}

// edit Form submission handler
document.addEventListener('DOMContentLoaded', function() {
    const editForm = document.getElementById('edit-form');
    
    if (editForm) {
        editForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const addressId = this.getAttribute('data-address-id');
            if (!addressId) {
                Swal.fire('Error', 'Address ID not found', 'error');
                return;
            }

            // Gather form data - Note we're getting the value directly from the checked radio button
            const formData = {
                name: document.getElementById('edit-name').value,
                addressType: document.querySelector('input[name="edit-addressType"]:checked').value,
                phone: document.getElementById('edit-phone').value,
                altPhone: document.getElementById('edit-alt-phone').value,
                landmark: document.getElementById('edit-landmark').value,
                city: document.getElementById('edit-city').value,
                state: document.getElementById('edit-state').value,
                pincode: document.getElementById('edit-pincode').value
            };

            try {
                const response = await fetch(`/profile/edit-address/${addressId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (data.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editAddressModal'));
                    modal.hide();

                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        // Reload page to show updated address
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Failed to update address'
                    });
                }
            } catch (error) {
                console.error('Error updating address:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Something went wrong while updating the address'
                });
            }
        });
    }
});





// Edit Profile Form Handler with SweetAlert2
document.getElementById('editProfileForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch('/update-profile', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData)),
        });
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Profile updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = '/dashboard';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message || 'Failed to update profile'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong while updating profile'
        });
    }
});



// Change Password Form Handler with SweetAlert2
document.getElementById('changePasswordForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    
    try {
        const response = await fetch('/change-password', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.fromEntries(formData)),
        });
        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Password changed successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = '/dashboard';
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: data.message || 'Failed to change password'
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Something went wrong while changing password'
        });
    }
});

</script>






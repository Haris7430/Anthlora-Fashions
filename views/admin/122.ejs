


This is my productSchema.js code:-
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    salesPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });



const Product = mongoose.model("Product", productSchema);

module.exports = Product;





This is my userRouter.js code:- 


router.get('/productDetails', userController.getProductDetails);
router.get('/product/:productId/variant/:variantId', userController.getVariantDetails);


router.get('/userCart',userAuth, userCartController.getCartPage); 
router.post('/addToCart/:id', userAuth, userCartController.addToCart);
router.delete('/removeFromCart/:productId', userAuth, userCartController.removeFromCart);
router.put('/updateCart/:productId', userAuth, userCartController.updateCart);


This is my userController.js code:- 



// userController.js - Updated getProductDetails function
const getProductDetails = async (req, res) => {
    try {
        const productId = req.query.id;
        const product = await Product.findById(productId)
            .populate('category')
            .lean();

        if (!product) {
            return res.status(404).send('Product not found');
        }

        // Filter listed variants and process their data
        const processedVariants = product.variants
            .filter(variant => variant.isListed)
            .map(variant => ({
                _id: variant._id,
                color: variant.color,
                sizes: variant.sizes,
                images: variant.images,
                isListed: variant.isListed,
                mainImage: variant.mainImage
            }));

        // Find initial variant (either main image or first one)
        const initialVariant = processedVariants.find(v => v.mainImage) || processedVariants[0];

    
        res.render('product', {
            product: product,
            initialVariant: initialVariant,
            variants: processedVariants,
            variantSizes: initialVariant.sizes,
            productImages: initialVariant.images,
        });

    } catch (error) {
        console.error('Error in getProductDetails:', error);
        res.status(500).send('Server Error');
    }
};

const getVariantDetails = async (req, res) => {
    try {
        const { productId, variantId } = req.params;
        
        const product = await Product.findById(productId);
        if (!product) {
            return res.status(404).json({ error: 'Product not found' });
        }

        const variant = product.variants.find(v => v._id.toString() === variantId);
        if (!variant) {
            return res.status(404).json({ error: 'Variant not found' });
        }

        

        res.json({
            sizes: variant.sizes,
            images: variant.images
        });

    } catch (error) {
        console.error('Error in getVariantDetails:', error);
        res.status(500).json({ error: 'Server error' });
    }
};

This is my product.ejs code:- 

<%- include("../../views/partials/user/header/") %>


<style>

.zoomContainer {
        z-index: 999;
    }
    .zoomLens {
        border: 2px solid #384aeb !important;
        opacity: 0.5;
    }


    .product-detail-area {
        padding: 60px 0;
        background: linear-gradient(to bottom, #f8f9fa, #ffffff);
    }

    /* Product Images */
    .product-images {
        background: #fff;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
    }

    .product-images:hover {
        box-shadow: 0 6px 20px rgba(0,0,0,0.12);
    }

    .main-image {
        width: 100%;
        height: 500px;
        border-radius: 8px;
        margin-bottom: 20px;
        overflow: hidden;
        background: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .main-image img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        transition: transform 0.3s ease;
    }

    .main-image img:hover {
        transform: scale(1.05);
    }

    .thumbnail-row {
        display: flex;
        gap: 12px;
        overflow-x: auto;
        padding: 10px 0;
        scrollbar-width: thin;
    }

    .thumbnail-row::-webkit-scrollbar {
        height: 6px;
    }

    .thumbnail-row::-webkit-scrollbar-thumb {
        background: #384aeb;
        border-radius: 10px;
    }

    .thumbnail {
        width: 90px;
        height: 90px;
        border: 2px solid #eee;
        border-radius: 8px;
        cursor: pointer;
        overflow: hidden;
        flex-shrink: 0;
        transition: all 0.2s ease;
    }

    .thumbnail.active {
        border-color: #384aeb;
        transform: translateY(-2px);
    }

    .thumbnail:hover {
        border-color: #384aeb;
    }

    .thumbnail img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Product Info */
    .product-info {
        background: #fff;
        padding: 35px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }

    .product-title {
        font-size: 28px;
        color: #2d2d2d;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .product-price {
        font-size: 26px;
        background: linear-gradient(45deg, #384aeb, #5c6bc0);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: bold;
        margin-bottom: 25px;
    }

    /* Variants */
    .variant-options {
        margin: 25px 0;
    }

    .variant-title {
        font-size: 18px;
        color: #333;
        margin-bottom: 15px;
        font-weight: 500;
    }

    .color-options {
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

    .color-option {
        width: 80px;
        height: 80px;
        border: 2px solid #eee;
        border-radius: 8px;
        cursor: pointer;
        overflow: hidden;
        position: relative;
        transition: all 0.3s ease;
    }

    .color-option::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, transparent 60%, rgba(0,0,0,0.7));
        z-index: 1;
    }

    .color-option.active {
        border-color: #384aeb;
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(56,74,235,0.2);
    }

    .color-option:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .color-option img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .color-name {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        color: #fff;
        padding: 8px 4px;
        font-size: 12px;
        text-align: center;
        z-index: 2;
    }

    /* Size Options */
    .size-options {
        margin: 25px 0;
    }

    .size-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 12px;
        margin-top: 15px;
    }

    .size-btn {
        min-width: 85px;
        padding: 12px;
        border: 2px solid #eee;
        border-radius: 8px;
        background: #fff;
        cursor: pointer;
        text-align: center;
        transition: all 0.3s ease;
    }

    .size-btn:hover:not(.out-of-stock) {
        border-color: #384aeb;
        transform: translateY(-2px);
    }

    .size-btn.active {
        border-color: #384aeb;
        background: linear-gradient(45deg, #384aeb, #5c6bc0);
        color: #fff;
        transform: translateY(-2px);
    }

    .size-btn.out-of-stock {
        opacity: 0.6;
        cursor: not-allowed;
        background: #f5f5f5;
    }

    .stock-info {
        font-size: 11px;
        color: #666;
        margin-top: 6px;
    }

    /* Add to Cart Button */
    .add-cart-btn {
        width: 100%;
        padding: 16px;
        background: linear-gradient(45deg, #384aeb, #5c6bc0);
        color: #fff;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        position: relative;
        overflow: hidden;
    }

    .add-cart-btn:hover:not(:disabled) {
        background: linear-gradient(45deg, #2a3bcc, #4a5ab0);
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(56,74,235,0.3);
    }

    .add-cart-btn:disabled {
        background: linear-gradient(45deg, #ccc, #999);
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }

    .product-description {
        padding: 20px 0;
        border-top: 1px solid #eee;
        border-bottom: 1px solid #eee;
        margin: 20px 0;
        line-height: 1.6;
        color: #666;
    }
</style>





	<!-- End Header Area -->

	<!-- Start Banner Area -->
	<section class="banner-area organic-breadcrumb">
		<div class="container">
			<div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
				<div class="col-first">
					<h1>Product Details Page</h1>
					<nav class="d-flex align-items-center">
						<a href="index.html">Home<span class="lnr lnr-arrow-right"></span></a>
						<a href="#">Shop<span class="lnr lnr-arrow-right"></span></a>
						<a href="single-product.html">product-details</a>
					</nav>
				</div>
			</div>
		</div>
	</section>
	<!-- End Banner Area -->







<!--================Single Product Area =================-->
<% if (product) { %>
	<div class="product-detail-area">
		<div class="container">
			<div class="row">
				<!-- Product Images -->
				<div class="col-lg-6">
					<div class="product-images">
						<div class="main-image" id="imageZoomContainer">
							<% if (initialVariant && initialVariant.images && initialVariant.images.length > 0) { %>
								<img id="mainImage" 
									 src="/uploads/product-images/<%= initialVariant.images[0].filename %>" 
									 alt="<%= product.productName %>"
									 data-zoom-image="/uploads/product-images/<%= initialVariant.images[0].filename %>"
									 class="zoom-image">
							<% } else { %>
								<img id="mainImage" 
									 src="/images/default-product.jpg" 
									 alt="Default product image"
									 class="zoom-image">
							<% } %>
						</div>
						
						<!-- Thumbnails -->
						<div class="thumbnail-row">
							<% if (initialVariant && initialVariant.images && initialVariant.images.length > 0) { %>
								<% initialVariant.images.forEach((image, index) => { %>
									<div class="thumbnail <%= index === 0 ? 'active' : '' %>"
										 onclick="changeMainImage('/uploads/product-images/<%= image.filename %>', this, '<%= image.filename %>')">
										<img src="/uploads/product-images/<%= image.filename %>" 
											 alt="Product view <%= index + 1 %>">
									</div>
								<% }); %>
							<% } %>
						</div>
					</div>
				</div>
	
				<!-- Product Info -->
				<div class="col-lg-6">
					<div class="product-info">
						<h1 class="product-title"><%= product.productName %></h1>
						<div class="product-price">₹<%= product.salesPrice.toFixed(2) %></div>
						
						<div class="product-description">
							<p><%= product.description %></p>
						</div>
	
						<!-- Color Variants -->
						<div class="variant-options">
							<h4 class="variant-title">Available Colors</h4>
							<div class="color-options">
								<% if (variants && variants.length > 0) { %>
									<% variants.forEach(variant => { %>
										<% if (variant.images && variant.images.length > 0) { %>
											<div class="color-option <%= variant._id.toString() === initialVariant._id.toString() ? 'active' : '' %>"
												 onclick="selectVariant('<%= product._id %>', '<%= variant._id %>', this)">
												<img src="/uploads/product-images/<%= variant.images[0].filename %>" 
													 alt="<%= variant.color %>">
												<span class="color-name"><%= variant.color %></span>
											</div>
										<% } %>
									<% }); %>
								<% } %>
							</div>
						<!-- Size Options -->
						<div class="size-options">
							<h4 class="variant-title">Select Size</h4>
							<div class="size-grid" id="sizeGrid">
								<% variantSizes.forEach(sizeObj => { %>
									<button type="button" 
											class="size-btn <%= sizeObj.quantity === 0 ? 'out-of-stock' : '' %>"
											onclick="selectSize(this, '<%= sizeObj.size %>')"
											<%= sizeObj.quantity === 0 ? 'disabled' : '' %>>
										UK <%= sizeObj.size %>
										<div class="stock-info">
											<%= sizeObj.quantity === 0 ? 'Out of Stock' : `${sizeObj.quantity} left` %>
										</div>
									</button>
								<% }) %>
							</div>
						</div>
	
						<!-- Add to Cart Form -->
						<form id="addToCartForm" onsubmit="return handleAddToCart(event)">
							<input type="hidden" id="selectedSize" name="size" value="">
							<input type="hidden" id="selectedVariant" name="variantId" value="<%= initialVariant._id %>">
							<button type="submit" class="add-cart-btn" id="addToCartBtn" disabled>
								Add to Cart
							</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
<% } else { %>
	<p>Product not found.</p>
<% } %>
<!--================End Single Product Area =================-->



<script>






    // Function to change main image
    function changeMainImage(src, element) {
        const mainImage = document.getElementById('mainImage');
        
        // Add fade effect
        mainImage.style.opacity = '0';
        setTimeout(() => {
            mainImage.src = src;
            mainImage.style.opacity = '1';
        }, 200);
        
        // Update active thumbnail
        document.querySelectorAll('.thumbnail').forEach(thumb => {
            thumb.classList.remove('active');
        });
        element.classList.add('active');
    }
    
    // Function to select variant
    function selectVariant(productId, variantId, element) {
        console.log('Selecting variant:', variantId); // Debug log
        
        // Update active state
        document.querySelectorAll('.color-option').forEach(option => {
            option.classList.remove('active');
        });
        element.classList.add('active');
        
        // Update form values
        document.getElementById('selectedVariant').value = variantId;
        document.getElementById('selectedSize').value = '';
        document.getElementById('addToCartBtn').disabled = true;
        
        // Fetch variant details
        fetch(`/product/${productId}/variant/${variantId}`)
.then(response => response.json())
.then(data => {
    if (data.images && data.images.length > 0) {
        // Update main image
        const mainImage = document.getElementById('mainImage');
        mainImage.src = data.images[0].fullPath;
        
        // Update thumbnails
        const thumbnailRow = document.querySelector('.thumbnail-row');
        thumbnailRow.innerHTML = data.images.map((image, index) => `
            <div class="thumbnail ${index === 0 ? 'active' : ''}"
                 onclick="changeMainImage('${image.fullPath}', this)">
                <img src="${image.fullPath}" 
                     alt="Product view ${index + 1}">
            </div>
        `).join('');
    }
                
                // Update sizes
                if (data.sizes) {
                    updateSizeOptions(data.sizes);
                }
            })
            .catch(error => {
                console.error('Error fetching variant details:', error);
            });
    }
    
    // Function to update size options
    function updateSizeOptions(sizes) {
        const sizeGrid = document.getElementById('sizeGrid');
        sizeGrid.innerHTML = sizes.map(size => `
            <button type="button" 
                    class="size-btn ${size.quantity === 0 ? 'out-of-stock' : ''}"
                    onclick="selectSize(this, ${size.size})"
                    ${size.quantity === 0 ? 'disabled' : ''}>
                UK ${size.size}
                <div class="stock-info">
                    ${size.quantity === 0 ? 'Out of Stock' : `${size.quantity} left`}
                </div>
            </button>
        `).join('');
    }
    
    // Function to select size
    function selectSize(element, size) {
        // Update active state
        document.querySelectorAll('.size-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        element.classList.add('active');
        
        // Update form value
        document.getElementById('selectedSize').value = size;
        document.getElementById('addToCartBtn').disabled = false;
    }
    
    // Function to handle add to cart
    function handleAddToCart(event) {
        event.preventDefault();
        
        const size = document.getElementById('selectedSize').value;
        if (!size) {
            alert('Please select a size');
            return false;
        }
        
        const variantId = document.getElementById('selectedVariant').value;
        console.log('Adding to cart:', { variantId, size });
        
        // Add your cart logic here
        
        return false;
    }
    
    // Initialize any necessary elements on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Any initialization code can go here
        console.log('Product page initialized');
    });
    </script>

This is my offerSchema.js code:- 
const mongoose = require("mongoose");

const offerSchema = new mongoose.Schema(
  {
    offerType: {
      type: String,
      enum: ["product", "category"],
      required: true,
    },
    offerName: {
      type: String,
      required: true,
      trim: true,
      unique: true
    },
    discount: {
      type: Number,
      required: true,
      min: 1,
      max: 50
    },
    startDate: {
      type: Date,
      required: true
    },
    expireDate: {
      type: Date,
      required: true
    },
    productIds: [{ 
      type: mongoose.Schema.Types.ObjectId,
      ref: "Product",
      required: function () {
        return this.offerType === "product";
      },
    }],
    categoryIds: [{ 
      type: mongoose.Schema.Types.ObjectId,
      ref: "Category",
      required: function () {
        return this.offerType === "category";
      },
    }],
    referralCode: {
      type: String,
      required: function () {
        return this.offerType === "referral";
      },
      unique: true,
      sparse: true
    },
    status: {
      type: String,
      enum: ["active", "inactive"],
      default: "active",
    },
    isListed: {
      type: Boolean,
      default: true
    }
  },
  { timestamps: true }
);

const Offer = mongoose.model("Offer", offerSchema);

module.exports = Offer;

This is my admingRouter.js code:- 
router.get('/offers',adminAuth, offerController.renderOffersPage);
router.get('/offers/check-existing', adminAuth, offerController.checkExistingOffers);

router.get('/offers/create',adminAuth, offerController.renderCreateOfferPage);
router.post('/offers/create',adminAuth, offerController.createOffer);
router.get('/offers/edit/:id',adminAuth, offerController.renderEditOfferPage);
router.put('/offers/edit/:id',adminAuth, offerController.updateOffer);
router.delete('/offers/delete/:id',adminAuth, offerController.deleteOffer);
router.patch('/offers/toggle-status/:id', adminAuth, offerController.toggleOfferStatus);
router.get('/offers/get-products',adminAuth, offerController.getProductsForOffer);
router.get('/offers/get-categories',adminAuth, offerController.getCategoriesForOffer);

This is my offerController.js code:-
const renderOffersPage = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = 10;
        const skip = (page - 1) * limit;

        const searchQuery = req.query.search ? {
            $or: [
                { offerName: { $regex: req.query.search, $options: 'i' } },
                { offerType: { $regex: req.query.search, $options: 'i' } }
            ]
        } : {}; 

        const totalOffers = await Offer.countDocuments(searchQuery);
        const totalPages = Math.ceil(totalOffers / limit);

        const offers = await Offer.find(searchQuery)
            .sort({ createdAt: -1 }) // Sort by creation date in descending order
            .skip(skip)
            .limit(limit)
            .populate('productIds', 'productName')
            .populate('categoryIds', 'name');

        // Check if it's an AJAX request
        if (req.headers['x-requested-with'] === 'XMLHttpRequest') {
            return res.json({
                offers,
                currentPage: page,
                totalPages,
                search: req.query.search || ''
            });
        }

        res.render('offerProduct', {
            offers,
            currentPage: page,
            totalPages,
            search: req.query.search || ''
        });
    } catch (error) {
        console.error('Error rendering offers page:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to load offers',
            error: error.message 
        });
    }
};


const checkExistingOffers = async (req, res) => {
    try {
        const { checkProducts, checkCategories } = req.query;
        
        let query;
        if (checkProducts) {
            // Check for active offers for specific products
            query = {
                offerType: 'product',
                status: 'active',
                productIds: { $in: checkProducts }
            };
        } else if (checkCategories) {
            // Check for active offers for specific categories
            query = {
                offerType: 'category',
                status: 'active',
                categoryIds: { $in: checkCategories }
            };
        } else {
            return res.json({ hasActiveOffers: false });
        }

        const existingOffers = await Offer.find(query);

        res.json({
            hasActiveOffers: existingOffers.length > 0,
            activeOffers: existingOffers
        });
    } catch (error) {
        console.error('Error checking existing offers:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to check existing offers',
            error: error.message 
        });
    }
};

const renderCreateOfferPage = async (req, res) => {
    try {
        const { type } = req.query;
        
        // Fetch all active products and categories
        const products = await Product.find({ isBlocked: false });
        const categories = await Category.find({ isListed: true });
        
        // Render appropriate template based on offer type
        if (type === 'product') {
            return res.render('createProductOffer', { 
                products,  
                categories 
            });
        } else if (type === 'category') {
            return res.render('createCategoryOffer', { 
                products, 
                categories 
            });
        } else {
            // If no type specified, show offer type selection modal
            return res.render('offerProduct', { 
                products, 
                categories,
                showOfferTypeModal: true 
            });
        }
    } catch (error) {
        console.error('Error rendering create offer page:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to load create offer page',
            error: error.message 
        });
    }
};

const createOffer = async (req, res) => {
    try {
        const {  
            offerType, 
            offerName, 
            discount, 
            startDate,
            expireDate 
        } = req.body;

        // Check for existing offer with the same name
        const existingOffer = await Offer.findOne({ offerName: offerName });
        if (existingOffer) {
            return res.status(400).json({ 
                success: false, 
                message: 'An offer with this name already exists',
                field: 'offerName'
            });
        }

        const newOffer = new Offer({
            offerType,
            offerName,
            discount: parseFloat(discount),
            startDate: new Date(startDate),
            expireDate: new Date(expireDate),
            status: 'active'
        });

        await newOffer.save();

        res.status(201).json({ 
            success: true, 
            message: 'Offer created successfully',
            offer: newOffer 
        });
    } catch (error) {
        console.error('Error creating offer:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to create offer',
            error: error.message 
        });
    }
};

const renderEditOfferPage = async (req, res) => {
    try {
        const offer = await Offer.findById(req.params.id);

        if (!offer) {
            return res.status(404).json({ 
                success: false, 
                message: 'Offer not found' 
            });
        }

        // Send offer data as JSON for modal population
        res.json({ 
            success: true, 
            offer: {
                _id: offer._id,
                offerName: offer.offerName,
                offerType: offer.offerType,
                discount: offer.discount,
                startDate: offer.startDate ? offer.startDate.toISOString().split('T')[0] : null,
                expireDate: offer.expireDate ? offer.expireDate.toISOString().split('T')[0] : null,
                productIds: offer.productIds,
                categoryIds: offer.categoryIds
            }
        });
    } catch (error) {
        console.error('Error rendering edit offer page:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to load edit offer page',
            error: error.message 
        });
    }
};

const updateOffer = async (req, res) => {
    try {
        const { 
            offerName, 
            discount, 
            startDate, 
            expireDate 
        } = req.body;

        // Check for existing offer with the same name (excluding current offer)
        const existingOffer = await Offer.findOne({ 
            offerName: offerName, 
            _id: { $ne: req.params.id } 
        });

        if (existingOffer) {
            return res.status(400).json({ 
                success: false, 
                message: 'An offer with this name already exists',
                field: 'offerName'
            });
        }

        const updatedOffer = await Offer.findByIdAndUpdate(
            req.params.id,
            {
                offerName,
                discount: parseFloat(discount),
                startDate: new Date(startDate),
                expireDate: new Date(expireDate)
            },
            { new: true, runValidators: true }
        );

        if (!updatedOffer) {
            return res.status(404).json({ 
                success: false, 
                message: 'Offer not found' 
            });
        }

        res.json({ 
            success: true, 
            message: 'Offer updated successfully',
            offer: updatedOffer 
        });
    } catch (error) {
        console.error('Error updating offer:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to update offer',
            error: error.message 
        });
    }
};

const deleteOffer = async (req, res) => {
    try {
        const deletedOffer = await Offer.findByIdAndDelete(req.params.id);

        if (!deletedOffer) {
            return res.status(404).json({ 
                success: false, 
                message: 'Offer not found' 
            });
        }

        res.json({ 
            success: true, 
            message: 'Offer deleted successfully' 
        });
    } catch (error) {
        console.error('Error deleting offer:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to delete offer',
            error: error.message 
        });
    }
};

const toggleOfferStatus = async (req, res) => {
    try {
        const offerId = req.params.id;
        
        // Find the current offer
        const offer = await Offer.findById(offerId);
        
        if (!offer) {
            return res.status(404).json({ 
                success: false, 
                message: 'Offer not found' 
            });
        }

        // Toggle the status
        const newStatus = offer.status === 'active' ? 'inactive' : 'active';
        
        // Update only the status field to avoid validation errors
        await Offer.findByIdAndUpdate(offerId, { 
            status: newStatus 
        }, { 
            runValidators: false,  // Skip validation
            new: true 
        });

        res.json({ 
            success: true, 
            message: 'Offer status updated successfully',
            newStatus: newStatus
        });
    } catch (error) {
        console.error('Error toggling offer status:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to update offer status',
            error: error.message 
        });
    }
};

const getProductsForOffer = async (req, res) => {
    try {
        const products = await Product.find({ isBlocked: false }, 'productName');
        res.json({ 
            success: true, 
            products 
        });
    } catch (error) {
        console.error('Error fetching products:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to fetch products',
            error: error.message 
        });
    }
};

const getCategoriesForOffer = async (req, res) => {
    try {
        const categories = await Category.find({ isListed: true }, 'name');
        res.json({ 
            success: true, 
            categories 
        });
    } catch (error) {
        console.error('Error fetching categories:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to fetch categories',
            error: error.message 
        });
    }
};

This is my offerProduct.ejs page code:- 

<style>
    .table td {
        vertical-align: middle;
    }
    .btn {
        margin: 0;
    }
    .dropdown-menu {
        min-width: 120px;
    }
    .actions-dropdown {
        cursor: pointer;
    }
    .error-message {
        color: red;
        font-size: 0.8em;
        margin-top: 5px;
    }

    .table td:nth-child(5) {
        text-align: center;
    }

    .custom-swal-popup {
    z-index: 99999 !important;
}

.swal2-container {
    z-index: 99999 !important;
}

    .status-cell {
        cursor: pointer;
        user-select: none;
    }
</style>

<!-- Content wrapper -->
<div class="content-wrapper">
    <!-- Content -->
    <div class="container-xxl flex-grow-1 container-p-y">
        <!-- Offer List Table -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Offers Management</h5>
                <div>
                    <button class="btn btn-primary" type="button" id="createOfferBtn">
                        Create New Offer
                    </button>
                    
                </div>
            </div>
            <div class="card-body">
                <!-- Search Bar -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search offers...">
                    </div>
                </div>
                
                <!-- Offers Table -->
                <div class="table-responsive" id="offersTableContainer">
                    <table class="table table-striped" id="offersTable">
                        <thead>
                            <tr>
                                <th>Offer Name</th>
                                <th>Offer Type</th>
                                <th>Discount (%)</th>
                                <th>Expiry Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="offersTableBody">
                            <% offers.forEach(offer => { %>
                                <tr id="offer-<%= offer._id %>">
                                    <td><%= offer.offerName %></td>
                                    <td><%= offer.offerType %></td>
                                    <td><%= offer.discount %>%</td>
                                    <td><%= offer.expireDate.toLocaleDateString() %></td>
                                    <td class="status-cell" data-offer-id="<%= offer._id %>" data-current-status="<%= offer.status %>">
                                        <span class="badge <%= 
                                            offer.status === 'active' && offer.isListed ? 'bg-success' : 
                                            offer.status === 'inactive' || !offer.isListed ? 'bg-warning' : 'bg-danger' 
                                        %>">
                                            <%= 
                                                offer.status === 'active' && offer.isListed ? 'Active' : 
                                                offer.status === 'inactive' || !offer.isListed ? 'Inactive' : 'Error' 
                                            %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="dropdown">
                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle actions-dropdown" 
                                                    type="button" 
                                                    data-bs-toggle="dropdown" 
                                                    aria-expanded="false">
                                                Actions
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <a class="dropdown-item" href="/admin/offers/edit/<%= offer._id %>">
                                                        <i class="bx bx-edit-alt me-1"></i> Edit
                                                    </a>
                                                </li>
                                                <li>
                                                    <hr class="dropdown-divider">
                                                </li>
                                                <li>
                                                    <a class="dropdown-item text-danger delete-offer" href="#" 
                                                       data-id="<%= offer._id %>">
                                                        <i class="bx bx-trash me-1"></i> Delete
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                    <td>
                                        
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>

                <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
                <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
                <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
                
                <script>
                
                document.addEventListener('DOMContentLoaded', function () {
                    const axiosInstance = axios.create({
                        baseURL: '/admin/offers',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                
                    // Validation Functions
                    function clearErrorMessages() {
                        const errorMessages = document.querySelectorAll('.error-message');
                        errorMessages.forEach(el => el.textContent = '');
                    }
                
                    function validateForm() {
                        clearErrorMessages();
                        let isValid = true;
                
                        // Offer Name Validation
                        const offerName = document.getElementById('offerName');
                        if (!offerName.value.trim()) {
                            document.getElementById('offerNameError').textContent = 'Offer name is required';
                            isValid = false;
                        }
                
                        // Offer Type Validation
                        const offerType = document.getElementById('offerType');
                        if (!offerType.value) {
                            document.getElementById('offerTypeError').textContent = 'Please select an offer type';
                            isValid = false;
                        }
                
                        // Discount Validation
                        const discount = document.getElementById('discount');
                        if (!discount.value) {
                            document.getElementById('discountError').textContent = 'Discount is required';
                            isValid = false;
                        } else {
                            const discountValue = parseFloat(discount.value);
                            if (isNaN(discountValue) || discountValue < 1 || discountValue > 50) {
                                document.getElementById('discountError').textContent = 'Discount must be between 1 and 50%';
                                isValid = false;
                            }
                        }
                
                        // Start Date Validation
                        const startDate = document.getElementById('startDate');
                    const today = new Date();
                    today.setHours(0, 0, 0, 0); // Reset time to start of day for accurate comparison
                    
                    if (!startDate.value) {
                        document.getElementById('startDateError').textContent = 'Start date is required';
                        isValid = false;
                    } else {
                        const selectedStartDate = new Date(startDate.value);
                        if (selectedStartDate < today) {
                            document.getElementById('startDateError').textContent = 'Start date cannot be in the past';
                            isValid = false;
                        }
                    }
                
                
                        // End Date Validation
                        const expireDate = document.getElementById('expireDate');
                        if (!expireDate.value) {
                            document.getElementById('expireDateError').textContent = 'End date is required';
                            isValid = false;
                        } else {
                            // Ensure end date is after start date
                            if (new Date(expireDate.value) <= new Date(startDate.value)) {
                                document.getElementById('expireDateError').textContent = 'End date must be after start date';
                                isValid = false;
                            }
                        }
                
                        return isValid;
                    }
                
                    // Submit Offer Functionality
                    const submitOfferBtn = document.getElementById('submitOfferBtn');
                    const createOfferModal = new bootstrap.Modal(document.getElementById('createOfferModal'));
                
                
                    
                    submitOfferBtn.addEventListener('click', async function() {
                    if (!validateForm()) {
                        return;
                    }
                
                    try {
                        const formData = {
                            offerName: document.getElementById('offerName').value,
                            offerType: document.getElementById('offerType').value,
                            discount: document.getElementById('discount').value,
                            startDate: document.getElementById('startDate').value,
                            expireDate: document.getElementById('expireDate').value
                        };
                
                        // Hide the modal first
                        createOfferModal.hide();
                
                        const response = await axiosInstance.post('/create', formData);
                
                        if (response.data.success) {
                            // Ensure the modal is completely hidden
                            document.querySelector('.modal-backdrop')?.remove();
                            
                            // Show success message with high z-index
                            Swal.fire({
                                icon: 'success',
                                title: 'Offer Created',
                                text: 'Your offer has been created successfully!',
                                showConfirmButton: true,
                                confirmButtonText: 'OK',
                                // Add high z-index to ensure it's on top
                                heightAuto: false,
                                customClass: {
                                    popup: 'custom-swal-popup'
                                }
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    // Reload the page to show the new offer
                                    window.location.reload();
                                }
                            });
                        } else {
                            // Show error message with high z-index
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.data.message || 'Failed to create offer',
                                confirmButtonText: 'Try Again',
                                // Add high z-index to ensure it's on top
                                heightAuto: false,
                                customClass: {
                                    popup: 'custom-swal-popup'
                                }
                            });
                        }
                    } catch (error) {
                        console.error('Offer creation error:', error);
                        
                        // Ensure the modal is completely hidden
                        document.querySelector('.modal-backdrop')?.remove();
                
                        // Check if it's a validation error from the server
                        if (error.response && error.response.data) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Validation Error',
                                text: error.response.data.message || 'Failed to create offer',
                                confirmButtonText: 'Try Again',
                                // Add high z-index to ensure it's on top
                                heightAuto: false,
                                customClass: {
                                    popup: 'custom-swal-popup'
                                }
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Network Error',
                                text: 'Unable to create offer. Please check your connection.',
                                confirmButtonText: 'Try Again',
                                // Add high z-index to ensure it's on top
                                heightAuto: false,
                                customClass: {
                                    popup: 'custom-swal-popup'
                                }
                            });
                        }
                    }
                });
                
                
                
                    // Search Functionality
                    const searchInput = document.getElementById('searchInput');
                    searchInput.addEventListener('input', function() {
                        const searchTerm = this.value.toLowerCase();
                        const rows = document.querySelectorAll('#offersTableBody tr');
                        
                        rows.forEach(row => {
                            const cells = row.getElementsByTagName('td');
                            const shouldShow = Array.from(cells).some(cell => 
                                cell.textContent.toLowerCase().includes(searchTerm)
                            );
                            row.style.display = shouldShow ? '' : 'none';
                        });
                    });
                
                    // Pagination Handling
                    document.getElementById('pagination')?.addEventListener('click', async (e) => {
                        if (e.target.classList.contains('page-link')) {
                            const page = e.target.dataset.page;
                            try {
                                const response = await axiosInstance.get(`?page=${page}`);
                                
                                // Update table body 
                                const tableBodyHTML = response.data.offers.map(offer => `
                                    <tr id="offer-${offer._id}">
                                        <td>${offer.offerName}</td>
                                        <td>${offer.offerType}</td>
                                        <td>${offer.discount}%</td>
                                        <td>${new Date(offer.expireDate).toLocaleDateString()}</td>
                                        <td>
                    <span class="badge ${
                        offer.status === 'active' && offer.isListed ? 'bg-success' : 
                        offer.status === 'inactive' || !offer.isListed ? 'bg-warning' : 'bg-danger'
                    }">
                        ${
                            offer.status === 'active' && offer.isListed ? 'Active' : 
                            offer.status === 'inactive' || !offer.isListed ? 'Inactive' : 'Error'
                        }
                    </span>
                </td>
                                        <td>
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle actions-dropdown" 
                                                        type="button" 
                                                        data-bs-toggle="dropdown" 
                                                        aria-expanded="false">
                                                    Actions
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li>
                                                        <a class="dropdown-item" href="/admin/offers/edit/${offer._id}">
                                                            <i class="bx bx-edit-alt me-1"></i> Edit
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item toggle-status" href="#" 
                                                           data-id="${offer._id}" 
                                                           data-current-status="${offer.status}">
                                                            <i class="bx ${offer.status === 'active' ? 'bx-block' : 'bx-check-circle'} me-1"></i> 
                                                            ${offer.status === 'active' ? 'Deactivate' : 'Activate'}
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <hr class="dropdown-divider">
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item text-danger delete-offer" href="#" 
                                                           data-id="${offer._id}">
                                                            <i class="bx bx-trash me-1"></i> Delete
                                                        </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                `).join('');
                
                                document.getElementById('offersTableBody').innerHTML = tableBodyHTML;
                                
                                // Update pagination
                                const paginationHTML = `
                                    ${response.data.currentPage > 1 ? 
                                        `<button class="btn btn-secondary page-link" data-page="${response.data.currentPage - 1}">Previous</button>` : 
                                        `<button class="btn btn-secondary" disabled>Previous</button>`
                                    }
                                    <span id="page-info" class="mx-3">Page ${response.data.currentPage} of ${response.data.totalPages}</span>
                                    ${response.data.currentPage < response.data.totalPages ? 
                                        `<button class="btn btn-secondary page-link" data-page="${response.data.currentPage + 1}">Next</button>` : 
                                        `<button class="btn btn-secondary" disabled>Next</button>`
                                    }
                                `;
                                document.getElementById('pagination').innerHTML = paginationHTML;
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Pagination Error',
                                    text: 'Failed to load page. Please try again.'
                                });
                            }
                        }
                    });
                
                    // Delete Offer Functionality
                    // Delete Offer Functionality
                document.getElementById('offersTableBody').addEventListener('click', async (e) => {
                    const deleteOfferLink = e.target.closest('.delete-offer');
                    if (deleteOfferLink) {
                        e.preventDefault();
                        const offerId = deleteOfferLink.dataset.id;
                
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: 'You won\'t be able to revert this!',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, delete it!'
                        });
                
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/admin/offers/delete/${offerId}`, {
                                    method: 'DELETE',
                                    headers: {
                                        'X-Requested-With': 'XMLHttpRequest'
                                    }
                                });
                
                                const data = await response.json();
                                
                                if (data.success) {
                                    // Remove the row from the table
                                    const rowToRemove = document.getElementById(`offer-${offerId}`);
                                    if (rowToRemove) {
                                        rowToRemove.remove();
                                    }
                                    
                                    // Optionally, refresh the page or update pagination
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Deleted!',
                                        text: 'The offer has been deleted.',
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                
                                    // Optional: Refresh the current page or adjust pagination
                                    const currentPage = document.querySelector('#page-info').textContent.split(' ')[1];
                                    try {
                                        const response = await axiosInstance.get(`?page=${currentPage}`);
                                        
                                        // Update table body 
                                        const tableBodyHTML = response.data.offers.map(offer => `
                                            <tr id="offer-${offer._id}">
                                                <td>${offer.offerName}</td>
                                                <td>${offer.offerType}</td>
                                                <td>${offer.discount}%</td>
                                                <td>${new Date(offer.expireDate).toLocaleDateString()}</td>
                                                <td>
                                                    <span class="badge ${offer.status === 'active' ? 'bg-success' : 'bg-danger'}">
                                                        ${offer.status}
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle actions-dropdown" 
                                                                type="button" 
                                                                data-bs-toggle="dropdown" 
                                                                aria-expanded="false">
                                                            Actions
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            <li>
                                                                <a class="dropdown-item" href="/admin/offers/edit/${offer._id}">
                                                                    <i class="bx bx-edit-alt me-1"></i> Edit
                                                                </a>
                                                            </li>
                                                            <li>
                                                                <a class="dropdown-item toggle-status" href="#" 
                                                                   data-id="${offer._id}" 
                                                                   data-current-status="${offer.status}">
                                                                    <i class="bx ${offer.status === 'active' ? 'bx-block' : 'bx-check-circle'} me-1"></i> 
                                                                    ${offer.status === 'active' ? 'Deactivate' : 'Activate'}
                                                                </a>
                                                            </li>
                                                            <li>
                                                                <hr class="dropdown-divider">
                                                            </li>
                                                            <li>
                                                                <a class="dropdown-item text-danger delete-offer" href="#" 
                                                                   data-id="${offer._id}">
                                                                    <i class="bx bx-trash me-1"></i> Delete
                                                                </a>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </td>
                                            </tr>
                                        `).join('');
                
                                        document.getElementById('offersTableBody').innerHTML = tableBodyHTML;
                                        
                                        // Update pagination
                                        const paginationHTML = `
                                            ${response.data.currentPage > 1 ? 
                                                `<button class="btn btn-secondary page-link" data-page="${response.data.currentPage - 1}">Previous</button>` : 
                                                `<button class="btn btn-secondary" disabled>Previous</button>`
                                            }
                                            <span id="page-info" class="mx-3">Page ${response.data.currentPage} of ${response.data.totalPages}</span>
                                            ${response.data.currentPage < response.data.totalPages ? 
                                                `<button class="btn btn-secondary page-link" data-page="${response.data.currentPage + 1}">Next</button>` : 
                                                `<button class="btn btn-secondary" disabled>Next</button>`
                                            }
                                        `;
                                        document.getElementById('pagination').innerHTML = paginationHTML;
                                    } catch (error) {
                                        console.error('Error refreshing page after delete:', error);
                                    }
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: data.message || 'Failed to delete the offer.'
                                    });
                                }
                            } catch (error) {
                                console.error('Delete error:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Delete Error',
                                    text: 'Failed to delete offer'
                                });
                            }
                        }
                    }
                });
                
                    // Toggle Offer Status Functionality
                    document.getElementById('offersTableBody').addEventListener('click', async (e) => {
                    const statusCell = e.target.closest('.status-cell');
                    if (statusCell) {
                        const offerId = statusCell.dataset.offerId;
                        const currentStatus = statusCell.dataset.currentStatus;
                
                        const actionText = currentStatus === 'active' ? 'deactivate' : 'activate';
                        const confirmTitle = `${actionText.charAt(0).toUpperCase() + actionText.slice(1)} Offer`;
                        const confirmText = `Are you sure you want to ${actionText} this offer?`;
                
                        const result = await Swal.fire({
                            title: confirmTitle,
                            text: confirmText,
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: `Yes, ${actionText} it!`
                        });
                
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch(`/admin/offers/toggle-status/${offerId}`, {
                                    method: 'PATCH',
                                    headers: {
                                        'X-Requested-With': 'XMLHttpRequest',
                                        'Content-Type': 'application/json'
                                    }
                                });
                
                                const data = await response.json();
                
                                if (data.success) {
                                    // Update the status
                                    const badgeElement = statusCell.querySelector('.badge');
                                    
                                    if (currentStatus === 'active') {
                                        badgeElement.classList.remove('bg-success');
                                        badgeElement.classList.add('bg-warning');
                                        badgeElement.textContent = 'Inactive';
                                        statusCell.dataset.currentStatus = 'inactive';
                                    } else {
                                        badgeElement.classList.remove('bg-warning');
                                        badgeElement.classList.add('bg-success');
                                        badgeElement.textContent = 'Active';
                                        statusCell.dataset.currentStatus = 'active';
                                    }
                
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Offer Status Updated',
                                        text: `The offer has been successfully ${currentStatus === 'active' ? 'deactivated' : 'activated'}.`,
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: data.message || 'Failed to update offer status.'
                                    });
                                }
                            } catch (error) {
                                console.error('Toggle status error:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Status Update Error',
                                    text: 'Failed to update offer status'
                                });
                            }
                        }
                    }
                });
                
                const createOfferBtn = document.getElementById('createOfferBtn');
                createOfferBtn.addEventListener('click', function() {
                    const createOfferModal = new bootstrap.Modal(document.getElementById('createOfferModal'));
                    createOfferModal.show();
                });
                });
                
                </script>      
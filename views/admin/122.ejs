


This is my productSchema.js code:-
const mongoose = require("mongoose");
const { Schema } = mongoose;

const productSchema = new Schema({
    productName: {
        type: String,
        required: true
    },
    description: {
        type: String,
        default: ''
    },
    category: {
        type: Schema.Types.ObjectId,
        ref: "Category",
        required: true
    },
    regularPrice: {
        type: Number,
        required: true
    },
    salesPrice: {
        type: Number,
        required: true
    },
    
    variants: [{
        color: { type: String, required: true },
        sizes: [{
            size: { type: Number, required: true },
            quantity: { type: Number, required: true }
        }],
        images: [{
            filename: { type: String, required: true },
            contentType: { type: String, default: 'image/jpeg' }
        }],
        isListed: { type: Boolean, default: true },
        mainImage: { type: Boolean, default: false }  
    }],
    
    isBlocked: {
        type: Boolean,
        default: false
    },
   
}, { timestamps: true });



const Product = mongoose.model("Product", productSchema);

module.exports = Product;



This is my orderSchema.js code:- 
const mongoose = require('mongoose');
const { Schema } = mongoose;
const { v4: uuidv4 } = require('uuid');

const orderSchema = new Schema({
    orderId: {
        type: String,
        default: () => uuidv4(),
        unique: true
    },
    userId: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: true
    },
    items: [{
        productId: {
            type: Schema.Types.ObjectId,
            ref: 'Product',
            required: true
        },
        variantId: {
            type: Schema.Types.ObjectId,
            ref: 'Product'
        },
        color: {
            type: String,
            required: true
        },
        size: {
            type: Number,
            required: true
        },
        quantity: {
            type: Number,
            required: true
        },
        price: {
            type: Number,
            required: true
        },
        totalPrice: {
            type: Number,
            required: true
        }
    }],
    shippingAddress: {
        type: Schema.Types.Mixed,
        required: true
    },
    paymentMethod: {
        type: String,
        required: true,
        enum: ['COD', 'paypal']
    },
    subtotal: {
        type: Number,
        required: true
    },
    shippingCost: {
        type: Number,
        required: true
    },
    total: {
        type: Number,
        required: true
    },
    status: {
        type: String,
        required: true,
        enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled']
    }
}, { timestamps: true });

const Order = mongoose.model('Order', orderSchema);
module.exports = Order;



This is my userRouter.js code:- 

router.get('/checkout', userAuth, checkoutController.getCheckoutPage);
router.post('/checkout/place-order', userAuth, checkoutController.createOrder);
router.get('/orders/:orderId', userAuth, checkoutController.getOrderSummary);

router.get('/order/:orderId', userAuth,userProfileController.getOrderDetails);
router.post('/order/:orderId/cancel-item/:itemId', userAuth, userProfileController.cancelOrderItem);
router.post('/order/:orderId/cancel-order', userAuth, userProfileController.cancelEntireOrder);



This is my checkOutController.js code for your reference it will be correctly work:- active

const createOrder = async (req, res) => {
    try {
        const { addressId, paymentMethod } = req.body;

        // Validate address
        const userAddress = await Address.findOne({ userId: req.user._id });
        const selectedAddress = userAddress.address.find(addr => addr._id.toString() === addressId);

        if (!selectedAddress) {
            return res.status(400).json({
                success: false,
                message: 'Invalid address selected'
            });
        }

        // Get cart items with full product details
        const cart = await Cart.findOne({ userId: req.user._id })
            .populate({
                path: 'items.productId',
                model: 'Product',
                populate: {
                    path: 'variants',
                    model: 'Product'
                }
            });

        if (!cart || !cart.items.length) {
            return res.status(400).json({
                success: false,
                message: 'Cart is empty'
            });
        }

        // Calculate totals
        const subtotal = cart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        const shippingCost = 0;
        const total = subtotal + shippingCost;

        // Create new order with detailed item information
        const newOrder = new Order({
            userId: req.user._id,
            items: cart.items.map(item => ({
                productId: item.productId._id,
                quantity: item.quantity,
                price: item.price,
                totalPrice: item.price * item.quantity,
                color: item.color,
                size: item.size,
                variantId: item.variantId
            })),
            shippingAddress: selectedAddress,
            paymentMethod,
            subtotal,
            shippingCost,
            total,
            status: paymentMethod === 'COD' ? 'pending' : 'processing'
        });

        await newOrder.save();

        // Clear cart after order creation
        await Cart.deleteOne({ userId: req.user._id });

        res.status(200).json({
            success: true,
            message: 'Order placed successfully',
            orderId: newOrder._id
        });
    } catch (error) {
        console.error('Error creating order:', error);
        res.status(500).json({
            success: false,
            message: 'Error creating order',
            error: error.message
        });
    }
};

const getOrderSummary = async (req, res) => {
    try {
        const { orderId } = req.params;

        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).render('page-404', { message: 'Invalid order ID format' });
        }

        const order = await Order.findById(orderId)
            .populate({
                path: 'items.productId',
                populate: {
                    path: 'variants',
                    model: 'Product'
                }
            });

        if (!order) {
            return res.status(404).render('page-404', { message: 'Order not found' });
        }

        // Prepare items with variant images
        const orderItems = order.items.map(item => {
            const product = item.productId;
            const variant = product.variants.find(v => 
                v._id.toString() === item.variantId.toString()
            );

            return {
                ...item.toObject(),
                product: {
                    ...product.toObject(),
                    productImages: variant ? 
                        variant.images.map(img => img.filename) 
                        : [],
                    variantImages: variant ? 
                        variant.images.map(img => img.filename) 
                        : [],
                    variantImage: variant ? 
                        (variant.images.find(img => img.mainImage) || variant.images[0])?.filename 
                        : null,
                    color: item.color,
                    size: item.size
                }
            };
        });

        res.render('userOrderSummary', {
            order,
            orderItems,
            user: req.user
        });
    } catch (error) {
        console.error('Error loading order summary:', error);
        res.status(500).render('page-404', { message: 'Error loading order summary' });
    }
};




This is my userProfileController.js code:- 

const getOrderDetails = async (req, res) => {
    try {
        const { orderId } = req.params;
  
        if (!mongoose.Types.ObjectId.isValid(orderId)) {
            return res.status(400).render('page-404', { message: 'Invalid order ID' });
        }
  
        const order = await Order.findOne({ _id: orderId, userId: req.user._id }).populate({
            path: 'items.productId',
            populate: [
                { path: 'category', select: 'name' },
                { path: 'variants' }
            ]
        });
  
        if (!order) {
            return res.status(404).render('page-404', { message: 'Order not found' });
        }
  
        const orderItems = order.items.map((item) => ({
            ...item.toObject(),
            product: {
                ...item.productId.toObject(),
                productImages: item.productId.productImages || [],
                variantImages: item.productId.variants?.[0]?.images || [],
                category: item.productId.category
            },
        }));
  
        res.render('orderSummary', { order, orderItems, user: req.user });
    } catch (error) {
        console.error('Error fetching order details:', error);
        res.status(500).render('page-404', { message: 'Error fetching order details', error: error.message });
    }
};




const cancelOrderItem = async (req, res) => {
    try {
        const { orderId, itemId } = req.params;
        
        // Find the order and ensure it belongs to the current user
        const order = await Order.findOne({ 
            _id: orderId, 
            userId: req.user._id 
        }).populate('items.productId');

        if (!order) {
            return res.status(404).json({ 
                success: false, 
                message: 'Order not found' 
            });
        }

        // Find the specific item
        const orderItem = order.items.id(itemId);
        
        if (!orderItem) {
            return res.status(404).json({ 
                success: false, 
                message: 'Order item not found' 
            });
        }

        // Check if item can be cancelled
        if (order.status === 'delivered' || order.status === 'cancelled') {
            return res.status(400).json({ 
                success: false, 
                message: 'Cannot cancel this order' 
            });
        }

        // Update order item status
        orderItem.status = 'cancelled';
        
        // If all items are cancelled, update order status
        const allItemsCancelled = order.items.every(item => item.status === 'cancelled');
        if (allItemsCancelled) {
            order.status = 'cancelled';
        }

        await order.save();

        res.json({ 
            success: true, 
            message: 'Item cancelled successfully',
            orderStatus: order.status,
            itemStatus: orderItem.status
        });
    } catch (error) {
        console.error('Cancel Order Item Error:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to cancel order item' 
        });
    }
};

// Add a new function to cancel entire order
const cancelEntireOrder = async (req, res) => {
    try {
        const { orderId } = req.params;
        
        const order = await Order.findOne({ 
            _id: orderId, 
            userId: req.user._id 
        });

        if (!order) {
            return res.status(404).json({ 
                success: false, 
                message: 'Order not found' 
            });
        }

        // Check if order can be cancelled
        if (order.status === 'delivered' || order.status === 'cancelled') {
            return res.status(400).json({ 
                success: false, 
                message: 'Cannot cancel this order' 
            });
        }

        // Cancel all items
        order.items.forEach(item => {
            item.status = 'cancelled';
        });
        
        // Update order status
        order.status = 'cancelled';

        await order.save();

        res.json({ 
            success: true, 
            message: 'Order cancelled successfully',
            orderStatus: order.status
        });
    } catch (error) {
        console.error('Cancel Entire Order Error:', error);
        res.status(500).json({ 
            success: false, 
            message: 'Failed to cancel order' 
        });
    }
};


This is my adminRouter.js code:- 
router.get('/productVariants/:id',adminAuth,productController.productVariants);
router.get('/editVariant/:id', adminAuth, productController.editVariantForm);
router.post('/colorVariant/edit/:id', adminAuth, upload, productController.updateVariant);  


This is adminSide


This is my userProfile.ejs code :-

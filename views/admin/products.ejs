<%- include("../../views/partials/admin/header/") %>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

<style>
    .table td {
        vertical-align: middle;
    }
    .btn {
        margin: 0;
    }
</style>

<!-- Content wrapper -->
<div class="content-wrapper">
    <!-- Content -->
    <div class="container-xxl flex-grow-1 container-p-y">
        <!-- Product List Table -->
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Product List</h5>
            </div>
            <div class="card-datatable table-responsive">
                <table class="datatables-products table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Image</th>
                            <th>Sale Price</th>
                            <th>Status</th>
                            <th>Actions</th>
                            <th>Variants</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% data.forEach(product => { 
                            // Find main image from variants
                            const mainVariant = product.variants.find(variant => variant.mainImage);
                            const mainImage = mainVariant ? mainVariant.images[0] : null;
                        %>
                            <tr>
                                <td><%= product.productName %></td>
                                <td><%= product.category.name %></td>
                                <td>
                                    <% if (mainImage) { %>
                                        <img src="/uploads/product-images/<%= mainImage.filename %>" 
                                             alt="<%= product.productName %>" 
                                             width="50" 
                                             height="50" 
                                             style="object-fit: cover;"
                                        />
                                    <% } else { %>
                                        No Image
                                    <% } %>
                                </td>
                                
                                <td>â‚¹<%= product.salesPrice.toFixed(2) %></td>
                                <td>
                                    <%= product.isBlocked ? 'Blocked' : 'Active' %>
                                </td>
                                <td>
                                    <% if (!product.isBlocked) { %>
                                        <button class="btn btn-warning block-btn" data-id="<%= product._id %>" style="width:80px">
                                            Block
                                        </button>
                                    <% } else { %>
                                        <button class="btn btn-danger unblock-btn" data-id="<%= product._id %>" style="width:80px">
                                            Unblock
                                        </button>
                                    <% } %>
                                </td>
                                
                                <td>
                                    <div class="btn-group" role="group">
                                        <a href="/admin/editProduct/<%= product._id %>" class="btn btn-primary btn-sm">Edit</a>
                                        <a href="/admin/productVariants/<%= product._id %>" class="btn btn-secondary btn-sm">Variants</a>
                                    </div>
                                </td>
                                
                                <td>
                                    <button class="btn btn-danger delete-btn" data-id="<%= product._id %>" style="width:80px">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination -->
        <div id="pagination" class="d-flex justify-content-center my-4">
            <% if (totalPages > 1) { %>
                <% if (currentPage > 1) { %>
                    <a href="?page=<%= currentPage - 1 %>&search=<%= search %>" class="btn btn-secondary page-link">Previous</a>
                <% } else { %>
                    <button class="btn btn-secondary" disabled>Previous</button>
                <% } %>
                
                <span id="page-info" class="mx-3">Page <%= currentPage %> of <%= totalPages %></span>
                
                <% if (currentPage < totalPages) { %>
                    <a href="?page=<%= currentPage + 1 %>&search=<%= search %>" class="btn btn-secondary page-link">Next</a>
                <% } else { %>
                    <button class="btn btn-secondary" disabled>Next</button>
                <% } %>
            <% } %>
        </div>
    </div>
</div>

<%- include("../../views/partials/admin/footer/") %>

<script>
document.addEventListener('DOMContentLoaded', function () {
    // Pagination handler
    document.querySelector('#pagination').addEventListener('click', async (e) => {
        if (e.target.classList.contains('page-link')) {
            e.preventDefault();
            const url = e.target.href;

            try {
                const response = await fetch(url, {
                    headers: { 'X-Requested-With': 'XMLHttpRequest' }
                });
                const html = await response.text();

                // Update table and pagination
                document.querySelector('.card-datatable').innerHTML = 
                    new DOMParser().parseFromString(html, 'text/html')
                    .querySelector('.card-datatable').innerHTML;
                
                document.querySelector('#pagination').innerHTML = 
                    new DOMParser().parseFromString(html, 'text/html')
                    .querySelector('#pagination').innerHTML;
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Pagination Error',
                    text: 'Failed to load page. Please try again.'
                });
            }
        }
    });

    // Action handlers (block, unblock, delete)
    document.querySelector('.card-datatable').addEventListener('click', async (event) => {
        const productId = event.target.getAttribute('data-id');

        if (event.target.classList.contains('block-btn')) {
            try {
                const response = await fetch(`/admin/block-product/${productId}`, { method: 'POST' });
                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Product Blocked',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => location.reload());
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Block Error',
                    text: 'Failed to block product'
                });
            }
        } 
        else if (event.target.classList.contains('unblock-btn')) {
            try {
                const response = await fetch(`/admin/unblock-product/${productId}`, { method: 'POST' });
                const result = await response.json();
                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Product Unblocked',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => location.reload());
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Unblock Error',
                    text: 'Failed to unblock product'
                });
            }
        } 
        else if (event.target.classList.contains('delete-btn')) {
            Swal.fire({
                title: 'Are you sure?',
                text: 'You won\'t be able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/delete-product/${productId}`, { method: 'DELETE' });
                        const result = await response.json();
                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Deleted!',
                                text: result.message,
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => location.reload());
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: result.message
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Delete Error',
                            text: 'Failed to delete product'
                        });
                    }
                }
            });
        }
    });
});
</script>
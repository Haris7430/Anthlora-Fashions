
<%- include("../partials/admin/header/") %>

<style>
    .product-list {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #ddd;
        padding: 10px;
        border-radius: 4px;
    }
    .product-list .form-check {
        margin-bottom: 5px;
    }
    #selectedProductsContainer {
        margin-bottom: 15px;
    }
    .error-text {
        color: red;
        font-size: 0.85rem;
        margin-top: 5px;
        display: none;
    }
    .is-invalid {
        border-color: red;
    }
</style>

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Create Product Offer</h5>
                <a href="/admin/offers" class="btn btn-secondary">Back to Offers</a>
            </div>
            <div class="card-body">
                <form id="productOfferForm" novalidate>
                    <input type="hidden" name="offerType" value="product">
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label" for="offerName">Offer Name</label>
                            <input type="text" class="form-control" id="offerName" name="offerName" required>
                            <div id="offerNameError" class="error-text">
                                Offer name must be 3-50 characters long
                            </div>
                        </div>
                        
                        <div class="col-md-6 mb-3">
                            <label class="form-label" for="discount">Discount Percentage</label>
                            <input type="number" class="form-control" id="discount" name="discount" 
                                   min="0" max="50" step="0.1" required>
                            <div id="discountError" class="error-text">
                                Discount must be between 0 and 50%
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label" for="productSearch">Select Products</label>
                            <div class="input-group mb-2">
                                <input type="text" class="form-control" id="productSearch" placeholder="Search products...">
                                <button class="btn btn-outline-secondary" type="button" id="clearSearch">Clear</button>
                            </div>
                            
                            <div class="product-list" id="productList">
                                <% products.forEach(product => { %>
                                    <div class="form-check" data-product-name="<%= product.productName.toLowerCase() %>">
                                        <input class="form-check-input product-checkbox" 
                                               type="checkbox" 
                                               value="<%= product._id %>" 
                                               id="product-<%= product._id %>"
                                               name="productIds">
                                        <label class="form-check-label" for="product-<%= product._id %>">
                                            <%= product.productName %>
                                        </label>
                                    </div>
                                <% }); %>
                            </div>
                            
                            <div id="productsError" class="error-text">
                                Please select at least one product (max 10)
                            </div>
                        </div>

                        <div class="col-md-6 mb-3">
                            <label class="form-label">Expiry Date</label>
                            <input type="date" class="form-control" id="expireDate" name="expireDate" required>
                            <div id="expireDateError" class="error-text">
                                Expiry date must be between today and next year
                            </div>

                            <div id="selectedProductsContainer" class="mt-3">
                                <strong>Selected Products:</strong>
                                <div id="selectedProductsList" class="d-flex flex-wrap gap-2"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <button type="submit" class="btn btn-primary">Create Product Offer</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<%- include("../partials/admin/footer/") %>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('productOfferForm');
    const offerNameInput = document.getElementById('offerName');
    const discountInput = document.getElementById('discount');
    const expireDateInput = document.getElementById('expireDate');
    const productSearch = document.getElementById('productSearch');
    const clearSearchBtn = document.getElementById('clearSearch');
    const productList = document.getElementById('productList');
    const selectedProductsList = document.getElementById('selectedProductsList');
    const selectedProductsContainer = document.getElementById('selectedProductsContainer');

    // Error elements
    const offerNameError = document.getElementById('offerNameError');
    const discountError = document.getElementById('discountError');
    const expireDateError = document.getElementById('expireDateError');
    const productsError = document.getElementById('productsError');

    // Persistent state for selected products
    let selectedProductIds = new Set();

    // Set min and max dates for expiry date
    function setDateConstraints() {
        const today = new Date().toISOString().split('T')[0];
        const maxDate = new Date();
        maxDate.setFullYear(maxDate.getFullYear() + 1);
        const maxDateString = maxDate.toISOString().split('T')[0];
        
        expireDateInput.setAttribute('min', today);
        expireDateInput.setAttribute('max', maxDateString);
    }
    setDateConstraints();

    // Real-time validation functions
    function validateOfferName() {
        const offerName = offerNameInput.value.trim();
        const isValid = offerName.length >= 3 && offerName.length <= 50;
        
        offerNameInput.classList.toggle('is-invalid', !isValid);
        offerNameError.style.display = isValid ? 'none' : 'block';
        
        return isValid;
    }

    function validateDiscount() {
        const discount = parseFloat(discountInput.value);
        const isValid = !isNaN(discount) && discount >= 0 && discount <= 50;
        
        discountInput.classList.toggle('is-invalid', !isValid);
        discountError.style.display = isValid ? 'none' : 'block';
        
        return isValid;
    }

    function validateDate() {
        const selectedDate = new Date(expireDateInput.value);
        const today = new Date();
        const maxDate = new Date();
        maxDate.setFullYear(today.getFullYear() + 1);
        
        const isValid = selectedDate >= today && selectedDate <= maxDate;
        
        expireDateInput.classList.toggle('is-invalid', !isValid);
        expireDateError.style.display = isValid ? 'none' : 'block';
        
        return isValid;
    }

    function validateProducts() {
        const isValid = selectedProductIds.size > 0 && selectedProductIds.size <= 10;
        
        productsError.style.display = isValid ? 'none' : 'block';
        
        return isValid;
    }

    // Add event listeners for real-time validation
    offerNameInput.addEventListener('input', validateOfferName);
    discountInput.addEventListener('input', validateDiscount);
    expireDateInput.addEventListener('change', validateDate);

    // Real-time search functionality
    productSearch.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase().trim();
        const productCheckboxes = productList.querySelectorAll('.form-check');
        
        productCheckboxes.forEach(checkbox => {
            const productName = checkbox.getAttribute('data-product-name');
            checkbox.style.display = productName.includes(searchTerm) ? 'block' : 'none';
        });
    });

    // Clear search
    clearSearchBtn.addEventListener('click', function() {
        productSearch.value = '';
        const productCheckboxes = productList.querySelectorAll('.form-check');
        productCheckboxes.forEach(checkbox => {
            checkbox.style.display = 'block';
        });
    });

    // Product selection handling
    productList.addEventListener('change', function(e) {
        if (e.target.classList.contains('product-checkbox')) {
            const productId = e.target.value;
            const isChecked = e.target.checked;

            if (isChecked) {
                if (selectedProductIds.size >= 10) {
                    e.target.checked = false;
                    
                    Swal.fire({
                        icon: 'warning',
                        title: 'Maximum Products Reached',
                        text: 'You can select a maximum of 10 products.',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    });
                    
                    return;
                }
                selectedProductIds.add(productId);
            } else {
                selectedProductIds.delete(productId);
            }

            updateSelectedProducts();
        }
    });

    function updateSelectedProducts() {
        selectedProductsList.innerHTML = '';

        selectedProductIds.forEach(productId => {
            const checkbox = document.getElementById(`product-${productId}`);
            if (checkbox) {
                const productLabel = checkbox.nextElementSibling.textContent.trim();
                const badge = document.createElement('span');
                badge.className = 'badge bg-primary me-1 mb-1';
                badge.innerHTML = `${productLabel} <i class="bx bx-x" data-product-id="${productId}"></i>`;
                selectedProductsList.appendChild(badge);
                
                // Ensure checkbox remains checked
                checkbox.checked = true;
            }
        });

        // Allow removing products from selected list
        selectedProductsList.addEventListener('click', function(e) {
            if (e.target.classList.contains('bx-x')) {
                const productId = e.target.getAttribute('data-product-id');
                const checkbox = document.getElementById(`product-${productId}`);
                
                if (checkbox) {
                    checkbox.checked = false;
                    selectedProductIds.delete(productId);
                    updateSelectedProducts();
                }
                
                e.target.closest('.badge').remove();
            }
        });

        validateProducts();
    }

    // Form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Validate all fields
        const isOfferNameValid = validateOfferName();
        const isDiscountValid = validateDiscount();
        const isDateValid = validateDate();
        const areProductsValid = validateProducts();
        
        // Check if all validations pass
        if (!isOfferNameValid || !isDiscountValid || !isDateValid || !areProductsValid) {
            return;
        }
        
        // Get form values
        const offerName = offerNameInput.value.trim();
        const discount = discountInput.value;
        const expireDate = expireDateInput.value;
        const selectedProducts = Array.from(selectedProductIds);
        
        try {
            // Submit offer
            const response = await axios.post('/admin/offers/create', {
                offerType: 'product',
                offerName: offerName,
                discount: parseFloat(discount),
                expireDate: expireDate,
                productIds: selectedProducts
            });
            
            // Success handling
            Swal.fire({
                icon: 'success',
                title: 'Product Offer Created',
                text: 'The product offer has been successfully created.',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.href = '/admin/offers';
            });
        } catch (error) {
            // Error handling
            if (error.response && error.response.data) {
                const errorResponse = error.response.data;
                
                if (errorResponse.message && errorResponse.message.includes('duplicate key')) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Duplicate Offer',
                        text: 'An offer with this name already exists. Please choose a different offer name.',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    });
                    
                    // Highlight the offer name input
                    offerNameInput.classList.add('is-invalid');
                    offerNameError.textContent = 'An offer with this name already exists';
                    offerNameError.style.display = 'block';
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Submission Error',
                        text: errorResponse.message || 'An error occurred while creating the offer.',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    });
                }
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Submission Error',
                    text: 'An unexpected error occurred.',
                    confirmButtonColor: '#3085d6',
                    confirmButtonText: 'OK'
                });
            }
        }
    });

    // Restore selected products if page is reloaded
    function restoreSelectedProducts() {
        const savedProducts = JSON.parse(localStorage.getItem('selectedProductIds') || '[]');
        savedProducts.forEach(productId => {
            const checkbox = document.getElementById(`product-${productId}`);
            if (checkbox) {
                checkbox.checked = true;
                selectedProductIds.add(productId);
            }
        });
        updateSelectedProducts();
    }
    restoreSelectedProducts();

    // Save selected products before page unload
    window.addEventListener('beforeunload', function() {
        localStorage.setItem('selectedProductIds', JSON.stringify(Array.from(selectedProductIds)));
    });
});
</script>

<%- include("../../views/partials/admin/header") %>

<style>
  .is-invalid {
    border-color: #dc3545;
    padding-right: calc(1.5em + 0.75rem);
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
  }

  .error-message {
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #dc3545;
  }

  .image-preview-square {
    width: 100%;
    height: 200px;
    border: 2px dashed #ccc;
    border-radius: 8px;
    position: relative;
    background-color: #f9f9f9;
    cursor: pointer;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    background-size: cover;
    background-position: center;
  }

  .preview-text {
    color: #666;
    font-size: 14px;
    text-align: center;
  }

  .image-preview-square:hover {
    border-color: #666;
  }

  .image-upload-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .image-label {
    margin-bottom: 10px;
    cursor: pointer;
    font-weight: 500;
  }

  .modal .img-container {
    max-height: 500px;
    width: 100%;
    overflow: hidden;
  }

  #cropImage {
    max-width: 100%;
    max-height: 500px;
  }

  a {
    text-decoration: none !important;
  }

  /* Custom select styling to match floating inputs */
  .form-floating-select {
    position: relative;
  }

  .form-floating-select .form-select {
    height: calc(3.5rem + 2px);
    padding: 1rem 0.75rem;
    border-radius: 0.375rem;
  }

  .form-floating-select label {
    position: absolute;
    top: -0.75rem;
    left: 0.75rem;
    padding: 0 0.25rem;
    background: white;
    font-size: 0.75rem;
    color: #6c757d;
    z-index: 10;
  }


  .form-floating > .form-select {
    padding-top: 1.625rem;
    padding-bottom: 0.625rem;
  }
  .form-floating > .form-select + label {
    opacity: 0.65;
  }
</style>

<!-- Content wrapper -->
<div class="content-wrapper">
  <div class="container-xxl flex-grow-1 container-p-y">
    <div class="app-ecommerce">
      <!-- Add Product Header -->
      <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4 gap-4 gap-md-0">
        <div class="d-flex flex-column justify-content-center">
          <h4 class="mb-1">Add a New Product</h4>
          <p class="mb-0">Manage your store's products effectively</p>
        </div>
      </div>
    
      <!-- Product Form -->
      <div class="row">
        <div class="col-12 col-lg-12">
          <form id="productForm" novalidate>            
            <!-- Product Information Card -->
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Product Information</h5>
              </div>
              <div class="card-body">
                <!-- Product Name -->
                <div class="form-floating form-floating-outline mb-4">
                  <input type="text" class="form-control" id="productName" placeholder="Product Title" name="productName" aria-label="Product title">
                  <label for="productName">Product Name</label>
                  <div class="error-message" id="productName-error"></div>
                </div>
    
                <!-- Description -->
                <div class="mb-4">
                  <div class="form-floating">
                    <textarea class="form-control" id="description" placeholder="Enter product description" name="description" style="height: 100px"></textarea>
                    <label for="description">Description (Optional)</label>
                  </div>
                  <div class="error-message" id="description-error"></div>
                </div>
    
                <!-- Price, Quantity, Category -->
                <div class="row mb-4">
                  <div class="col-md-4">
                    <div class="form-floating">
                      <input type="number" class="form-control" id="regularPrice" placeholder="Regular Price" name="regularPrice" step="0.01"> 
                      <label for="regularPrice">Regular Price (â‚¹)</label>
                      <div class="error-message" id="regularPrice-error"></div>
                    </div>
                  </div>
                  
                  <div class="col-md-4">
                    <div class="form-floating">
                      <input type="number" class="form-control" id="quantity" placeholder="Quantity" name="quantity">
                      <label for="quantity">Quantity</label>
                      <div class="error-message" id="quantity-error"></div>
                    </div>
                  </div>

                  <!-- Category with Floating Select -->
                  <div class="col-md-4">
                    <div class="form-floating">
                      <select id="category" class="form-select" name="category">
                        <option value="">Select Category</option>
                        <% for (let i = 0; i < cat.length; i++) { %>
                          <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                        <% } %>
                      </select>
                      <label for="category">Category</label>
                      <div class="error-message" id="category-error"></div>
                    </div>
                  </div>
                </div>
    
                <!-- Color and Size -->
                <div class="row mb-4">
                  <div class="col-md-6">
                    <div class="form-floating">
                      <input type="text" class="form-control" id="color" placeholder="Color" name="color"> 
                      <label for="color">Color</label>
                      <div class="error-message" id="color-error"></div>
                    </div>
                  </div>
    
                  <div class="col-md-6">
                    <div class="form-floating-select">
                      <select class="form-select" id="size" name="size">
                        <option value="">Select Size</option>
                        <option value="6">6</option>
                        <option value="7">7</option>
                        <option value="8">8</option>
                        <option value="9">9</option>
                        <option value="10">10</option>
                      </select>
                      <label for="size">Size</label>
                      <div class="error-message" id="size-error"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
    
            <!-- Product Image Upload -->
            <div class="card mb-4">
              <div class="card-header">
                <h5 class="mb-0">Product Images (3 Required)</h5>
              </div>
              <div class="card-body">
                <div class="row">
                  <% for(let i = 1; i <= 3; i++) { %>
                    <div class="col-md-4 mb-3">
                      <div class="image-upload-wrapper">
                        <label for="productImage<%= i %>" class="image-label">Add Image <%= i %></label>
                        <input class="form-control d-none" type="file" id="productImage<%= i %>" name="images" accept="image/*" onchange="previewImage(this, '<%= i %>')">
                        <div id="imagePreview<%= i %>" class="image-preview-square">
                          <div class="preview-text">Click to upload</div>
                        </div>
                      </div>
                    </div>
                  <% } %>
                </div>
                <div class="error-message" id="images-error"></div>
                <small class="text-muted">Upload 3 images. Maximum file size: 2MB each. Formats: jpg, png, gif.</small>
              </div>
            </div>
            
            <button type="submit" class="btn btn-primary">
              Add Product
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Modal for cropping -->
  <div class="modal fade" id="cropModal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="img-container">
            <img id="cropImage" src="" alt="Image to crop" style="max-width: 100%;">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="cropButton">Crop & Save</button>
        </div>
      </div>
    </div>
  </div>

  <div class="content-backdrop fade"></div>
</div>

<!-- Required CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">

<!-- Required JS -->
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  let cropper;
  let currentInput;
  let currentPreviewId;
  const form = document.getElementById('productForm');

  // Validation rules
  const validators = {
    required: (value) => value && value.toString().trim().length > 0,
    number: (value) => !isNaN(value) && parseFloat(value) > 0,
    fileSize: (file) => file.size <= 2 * 1024 * 1024, // 2MB
    imageType: (file) => ['image/jpeg', 'image/png', 'image/gif'].includes(file.type)
  };

  const errorMessages = {
    productName: 'Product name is required',
    regularPrice: 'Valid regular price is required',
    quantity: 'Valid quantity is required',
    color: 'Color is required',
    size: 'Size is required',
    category: 'Category is required',
    images: 'At least 3 images are required'
  };

  // Error Handling Functions
  function showError(fieldId, message) {
    const errorElement = document.getElementById(`${fieldId}-error`);
    const inputElement = document.getElementById(fieldId);
    
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.style.display = 'block';
    }
    
    if (inputElement) {
      inputElement.classList.add('is-invalid');
    }
  }

  function clearError(fieldId) {
    const errorElement = document.getElementById(`${fieldId}-error`);
    const inputElement = document.getElementById(fieldId);
    
    if (errorElement) {
      errorElement.textContent = '';
      errorElement.style.display = 'none';
    }
    
    if (inputElement) {
      inputElement.classList.remove('is-invalid');
    }
  }

  // Validate single field
  function validateField(fieldId, value) {
    clearError(fieldId);
    
    switch(fieldId) {
      case 'productName':
      case 'color':
      case 'size':
      case 'category':
        if (!validators.required(value)) {
          showError(fieldId, errorMessages[fieldId]);
          return false;
        }
        break;
      
      case 'regularPrice':
      case 'quantity':
        if (!validators.number(value)) {
          showError(fieldId, errorMessages[fieldId]);
          return false;
        }
        break;
    }
    
    return true;
  }

  // Validate images
  function validateImages() {
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    let validImageCount = 0;
    
    for (let input of imageInputs) {
      if (input.files && input.files.length > 0) {
        const file = input.files[0];
        
        if (!validators.fileSize(file)) {
          showError(input.id, 'Image must be less than 2MB');
          return false;
        }
        
        if (!validators.imageType(file)) {
          showError(input.id, 'Please upload JPG, PNG, or GIF files only');
          return false;
        }
        
        validImageCount++;
      }
    }
    
    if (validImageCount < 3) {
      showError('images', errorMessages.images);
      return false;
    }
    
    return true;
  }

  // Image Preview and Cropping Setup
  function setupImageCropping() {
    document.querySelectorAll('.image-preview-square').forEach((preview, index) => {
      preview.addEventListener('click', () => {
        document.getElementById(`productImage${index + 1}`).click();
      });
    });

    document.querySelectorAll('input[name="images"]').forEach((input, index) => {
      input.addEventListener('change', function() {
        const file = this.files[0];
        if (!file) return;

        currentInput = input;
        currentPreviewId = `imagePreview${index + 1}`;

        const reader = new FileReader();
        reader.onload = function(e) {
          const cropImage = document.getElementById('cropImage');
          cropImage.src = e.target.result;

          const cropModal = new bootstrap.Modal(document.getElementById('cropModal'));
          cropModal.show();

          // Destroy existing cropper if it exists
          if (cropper) {
            cropper.destroy();
          }

          // Wait for modal to fully show before initializing cropper
          cropModal._element.addEventListener('shown.bs.modal', function() {
            cropper = new Cropper(cropImage, {
              aspectRatio: 1,
              viewMode: 2,
              autoCropArea: 1,
              zoomable: true,
              scalable: true,
              movable: true,
            });
          }, { once: true });
        };
        reader.readAsDataURL(file);
      });
    });

    // Crop Button Handler
    document.getElementById('cropButton').addEventListener('click', function() {
      if (!cropper) return;

      const canvas = cropper.getCroppedCanvas({
        width: 600,
        height: 600,
        imageSmoothingQuality: 'high',
      });

      canvas.toBlob(function(blob) {
        const croppedFile = new File([blob], `cropped_${Date.now()}.jpeg`, {
          type: 'image/jpeg',
          lastModified: new Date().getTime()
        });

        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(croppedFile);
        currentInput.files = dataTransfer.files;

        const preview = document.getElementById(currentPreviewId);
        preview.style.backgroundImage = `url(${canvas.toDataURL()})`;
        preview.innerHTML = '';

        clearError(currentInput.id);

        const cropModal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
        cropModal.hide();

        // Destroy cropper
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
      }, 'image/jpeg', 0.9);
    });

    // Modal cleanup
    document.getElementById('cropModal').addEventListener('hidden.bs.modal', function() {
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
    });
  }

  // Form Submission with Axios
  function handleFormSubmission(e) {
  e.preventDefault();

  // Clear previous errors
  const errorElements = document.querySelectorAll('.error-message');
  errorElements.forEach(el => {
    el.textContent = '';
    el.style.display = 'none';
  });

  const inputElements = document.querySelectorAll('.form-control, .form-select');
  inputElements.forEach(el => el.classList.remove('is-invalid'));

  // Validate all fields
  const fieldsToValidate = ['productName', 'regularPrice', 'quantity', 'color', 'size', 'category'];
  let isValid = true;

  fieldsToValidate.forEach(fieldId => {
    const fieldElement = document.getElementById(fieldId);
    if (!validateField(fieldId, fieldElement.value)) {
      isValid = false;
    }
  });

  // Validate images
  if (!validateImages()) {
    isValid = false;
  }

  // If validation fails, stop submission
  if (!isValid) {
    return;
  }

  // Show confirmation SweetAlert before submission
  Swal.fire({
    title: 'Confirm Product Addition',
    text: 'Are you sure you want to add this product?',
    icon: 'question',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, add product!'
  }).then(async (result) => {
    if (result.isConfirmed) {
      // Prepare form data
      const formData = new FormData(form);

      try {
        // First, show loading alert
        Swal.fire({
          title: 'Adding Product...',
          text: 'Please wait while we process your request',
          icon: 'info',
          showConfirmButton: false,
          allowOutsideClick: false
        });

        // Wait a moment before processing
        await new Promise(resolve => setTimeout(resolve, 1500));

        // Send form data using Axios
        const response = await axios.post('/admin/addProducts', formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        // Successful submission
        Swal.fire({
          title: 'Success!',
          text: 'Product added successfully',
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.href = '/admin/products';
        });
      } catch (error) {
        // Handle errors
        console.error('Error:', error);
        let errorMessage = 'An error occurred while adding the product';
        
        if (error.response && error.response.data) {
          // Check for specific error messages
          if (error.response.data.errors) {
            // Handle validation errors
            Object.keys(error.response.data.errors).forEach(key => {
              showError(key, error.response.data.errors[key]);
            });
          }
          
          errorMessage = error.response.data.message || errorMessage;
        }

        Swal.fire({
          title: 'Error!',
          text: errorMessage,
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }
  });
}



  // Real-time validation
  function setupRealTimeValidation() {
    const fieldsToValidate = ['productName', 'regularPrice', 'quantity', 'color', 'size', 'category'];
    
    fieldsToValidate.forEach(fieldId => {
      const element = document.getElementById(fieldId);
      if (element) {
        element.addEventListener('blur', () => {
          validateField(fieldId, element.value);
        });

        element.addEventListener('input', () => {
          clearError(fieldId);
        });
      }
    });
  }

  // Initialize all setup functions
  function init() {
    setupImageCropping();
    setupRealTimeValidation();
    form.addEventListener('submit', handleFormSubmission);
  }

  // Run initialization
  init();
});

</script>

<%- include("../../views/partials/admin/footer") %>
